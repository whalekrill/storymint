/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateMetadataInstructionAccounts = {
  serverAuthority: Signer;
  vault?: PublicKey | Pda;
  masterState: PublicKey | Pda;
  metadata?: PublicKey | Pda;
  mintAuthority?: PublicKey | Pda;
  mint: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
};

// Data.
export type UpdateMetadataInstructionData = {
  discriminator: Uint8Array;
  newUri: string;
  newName: Option<string>;
};

export type UpdateMetadataInstructionDataArgs = {
  newUri: string;
  newName: OptionOrNullable<string>;
};

export function getUpdateMetadataInstructionDataSerializer(): Serializer<
  UpdateMetadataInstructionDataArgs,
  UpdateMetadataInstructionData
> {
  return mapSerializer<
    UpdateMetadataInstructionDataArgs,
    any,
    UpdateMetadataInstructionData
  >(
    struct<UpdateMetadataInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['newUri', string()],
        ['newName', option(string())],
      ],
      { description: 'UpdateMetadataInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([170, 182, 43, 239, 97, 78, 225, 186]),
    })
  ) as Serializer<
    UpdateMetadataInstructionDataArgs,
    UpdateMetadataInstructionData
  >;
}

// Args.
export type UpdateMetadataInstructionArgs = UpdateMetadataInstructionDataArgs;

// Instruction.
export function updateMetadata(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: UpdateMetadataInstructionAccounts & UpdateMetadataInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'lockedSolPnft',
    '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'
  );

  // Accounts.
  const resolvedAccounts = {
    serverAuthority: {
      index: 0,
      isWritable: true as boolean,
      value: input.serverAuthority ?? null,
    },
    vault: {
      index: 1,
      isWritable: true as boolean,
      value: input.vault ?? null,
    },
    masterState: {
      index: 2,
      isWritable: true as boolean,
      value: input.masterState ?? null,
    },
    metadata: {
      index: 3,
      isWritable: true as boolean,
      value: input.metadata ?? null,
    },
    mintAuthority: {
      index: 4,
      isWritable: false as boolean,
      value: input.mintAuthority ?? null,
    },
    mint: { index: 5, isWritable: false as boolean, value: input.mint ?? null },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenMetadataProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenMetadataProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateMetadataInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.vault.value) {
    resolvedAccounts.vault.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([118, 97, 117, 108, 116])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.metadata.value) {
    resolvedAccounts.metadata.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])),
      bytes().serialize(
        new Uint8Array([
          11, 112, 101, 177, 227, 209, 124, 69, 56, 157, 82, 127, 107, 4, 195,
          205, 88, 184, 108, 115, 26, 160, 253, 181, 73, 182, 209, 188, 3, 248,
          41, 70,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.mintAuthority.value) {
    resolvedAccounts.mintAuthority.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          109, 105, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'tokenMetadataProgram',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateMetadataInstructionDataSerializer().serialize(
    resolvedArgs as UpdateMetadataInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
