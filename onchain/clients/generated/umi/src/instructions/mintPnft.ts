/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MintPnftInstructionAccounts = {
  payer: Signer;
  vault?: PublicKey | Pda;
  masterState: PublicKey | Pda;
  masterMint: PublicKey | Pda;
  collectionMetadata: PublicKey | Pda;
  collectionMasterEdition: PublicKey | Pda;
  metadata: PublicKey | Pda;
  masterEdition: PublicKey | Pda;
  mint: Signer;
  mintAuthority?: PublicKey | Pda;
  tokenAccount: PublicKey | Pda;
  collectionAuthorityRecord: PublicKey | Pda;
  delegateAuthority?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
};

// Data.
export type MintPnftInstructionData = { discriminator: Uint8Array };

export type MintPnftInstructionDataArgs = {};

export function getMintPnftInstructionDataSerializer(): Serializer<
  MintPnftInstructionDataArgs,
  MintPnftInstructionData
> {
  return mapSerializer<
    MintPnftInstructionDataArgs,
    any,
    MintPnftInstructionData
  >(
    struct<MintPnftInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'MintPnftInstructionData',
    }),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([10, 40, 243, 254, 133, 205, 199, 93]),
    })
  ) as Serializer<MintPnftInstructionDataArgs, MintPnftInstructionData>;
}

// Instruction.
export function mintPnft(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: MintPnftInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'lockedSolPnft',
    '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    vault: {
      index: 1,
      isWritable: true as boolean,
      value: input.vault ?? null,
    },
    masterState: {
      index: 2,
      isWritable: true as boolean,
      value: input.masterState ?? null,
    },
    masterMint: {
      index: 3,
      isWritable: false as boolean,
      value: input.masterMint ?? null,
    },
    collectionMetadata: {
      index: 4,
      isWritable: true as boolean,
      value: input.collectionMetadata ?? null,
    },
    collectionMasterEdition: {
      index: 5,
      isWritable: false as boolean,
      value: input.collectionMasterEdition ?? null,
    },
    metadata: {
      index: 6,
      isWritable: true as boolean,
      value: input.metadata ?? null,
    },
    masterEdition: {
      index: 7,
      isWritable: true as boolean,
      value: input.masterEdition ?? null,
    },
    mint: { index: 8, isWritable: true as boolean, value: input.mint ?? null },
    mintAuthority: {
      index: 9,
      isWritable: false as boolean,
      value: input.mintAuthority ?? null,
    },
    tokenAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.tokenAccount ?? null,
    },
    collectionAuthorityRecord: {
      index: 11,
      isWritable: true as boolean,
      value: input.collectionAuthorityRecord ?? null,
    },
    delegateAuthority: {
      index: 12,
      isWritable: false as boolean,
      value: input.delegateAuthority ?? null,
    },
    tokenProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    rent: {
      index: 16,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
    tokenMetadataProgram: {
      index: 17,
      isWritable: false as boolean,
      value: input.tokenMetadataProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.vault.value) {
    resolvedAccounts.vault.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([118, 97, 117, 108, 116])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.mintAuthority.value) {
    resolvedAccounts.mintAuthority.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          109, 105, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.delegateAuthority.value) {
    resolvedAccounts.delegateAuthority.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(
          new Uint8Array([
            99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 95, 100, 101, 108,
            101, 103, 97, 116, 101,
          ])
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.masterMint.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = context.programs.getPublicKey(
      'rent',
      'SysvarRent111111111111111111111111111111111'
    );
    resolvedAccounts.rent.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'tokenMetadataProgram',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMintPnftInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
