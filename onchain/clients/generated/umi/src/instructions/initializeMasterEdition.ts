/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeMasterEditionInstructionAccounts = {
  payer: Signer;
  masterState?: PublicKey | Pda;
  masterMint?: PublicKey | Pda;
  masterMetadata: PublicKey | Pda;
  masterEdition: PublicKey | Pda;
  updateAuthority: Signer;
  authorityToken: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
};

// Data.
export type InitializeMasterEditionInstructionData = {
  discriminator: Uint8Array;
};

export type InitializeMasterEditionInstructionDataArgs = {};

export function getInitializeMasterEditionInstructionDataSerializer(): Serializer<
  InitializeMasterEditionInstructionDataArgs,
  InitializeMasterEditionInstructionData
> {
  return mapSerializer<
    InitializeMasterEditionInstructionDataArgs,
    any,
    InitializeMasterEditionInstructionData
  >(
    struct<InitializeMasterEditionInstructionData>(
      [['discriminator', bytes({ size: 8 })]],
      { description: 'InitializeMasterEditionInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([175, 153, 201, 57, 96, 128, 94, 181]),
    })
  ) as Serializer<
    InitializeMasterEditionInstructionDataArgs,
    InitializeMasterEditionInstructionData
  >;
}

// Instruction.
export function initializeMasterEdition(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: InitializeMasterEditionInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'lockedSolPnft',
    '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    masterState: {
      index: 1,
      isWritable: true as boolean,
      value: input.masterState ?? null,
    },
    masterMint: {
      index: 2,
      isWritable: true as boolean,
      value: input.masterMint ?? null,
    },
    masterMetadata: {
      index: 3,
      isWritable: true as boolean,
      value: input.masterMetadata ?? null,
    },
    masterEdition: {
      index: 4,
      isWritable: true as boolean,
      value: input.masterEdition ?? null,
    },
    updateAuthority: {
      index: 5,
      isWritable: true as boolean,
      value: input.updateAuthority ?? null,
    },
    authorityToken: {
      index: 6,
      isWritable: true as boolean,
      value: input.authorityToken ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    rent: {
      index: 10,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
    tokenMetadataProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.tokenMetadataProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.masterMint.value) {
    resolvedAccounts.masterMint.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([109, 97, 115, 116, 101, 114, 95, 109, 105, 110, 116])
      ),
    ]);
  }
  if (!resolvedAccounts.masterState.value) {
    resolvedAccounts.masterState.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 97, 115, 116, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.masterMint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = context.programs.getPublicKey(
      'rent',
      'SysvarRent111111111111111111111111111111111'
    );
    resolvedAccounts.rent.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'tokenMetadataProgram',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeMasterEditionInstructionDataSerializer().serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
