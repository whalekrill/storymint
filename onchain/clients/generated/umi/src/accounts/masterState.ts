/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type MasterState = Account<MasterStateAccountData>;

export type MasterStateAccountData = {
  discriminator: Uint8Array;
  collection: PublicKey;
  totalMinted: bigint;
};

export type MasterStateAccountDataArgs = {
  collection: PublicKey;
  totalMinted: number | bigint;
};

export function getMasterStateAccountDataSerializer(): Serializer<
  MasterStateAccountDataArgs,
  MasterStateAccountData
> {
  return mapSerializer<MasterStateAccountDataArgs, any, MasterStateAccountData>(
    struct<MasterStateAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['collection', publicKeySerializer()],
        ['totalMinted', u64()],
      ],
      { description: 'MasterStateAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([127, 252, 235, 145, 194, 19, 179, 42]),
    })
  ) as Serializer<MasterStateAccountDataArgs, MasterStateAccountData>;
}

export function deserializeMasterState(rawAccount: RpcAccount): MasterState {
  return deserializeAccount(rawAccount, getMasterStateAccountDataSerializer());
}

export async function fetchMasterState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterState> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MasterState');
  return deserializeMasterState(maybeAccount);
}

export async function safeFetchMasterState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterState | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMasterState(maybeAccount) : null;
}

export async function fetchAllMasterState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MasterState');
    return deserializeMasterState(maybeAccount);
  });
}

export async function safeFetchAllMasterState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMasterState(maybeAccount as RpcAccount));
}

export function getMasterStateGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'lockedSolPnft',
    '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      collection: PublicKey;
      totalMinted: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      collection: [8, publicKeySerializer()],
      totalMinted: [40, u64()],
    })
    .deserializeUsing<MasterState>((account) => deserializeMasterState(account))
    .whereField(
      'discriminator',
      new Uint8Array([127, 252, 235, 145, 194, 19, 179, 42])
    );
}
