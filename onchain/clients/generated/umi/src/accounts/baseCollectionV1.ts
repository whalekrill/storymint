/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type BaseCollectionV1 = Account<BaseCollectionV1AccountData>;

export type BaseCollectionV1AccountData = {
  discriminator: Uint8Array;
  key: Key;
  updateAuthority: PublicKey;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export type BaseCollectionV1AccountDataArgs = {
  key: KeyArgs;
  updateAuthority: PublicKey;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export function getBaseCollectionV1AccountDataSerializer(): Serializer<
  BaseCollectionV1AccountDataArgs,
  BaseCollectionV1AccountData
> {
  return mapSerializer<
    BaseCollectionV1AccountDataArgs,
    any,
    BaseCollectionV1AccountData
  >(
    struct<BaseCollectionV1AccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['key', getKeySerializer()],
        ['updateAuthority', publicKeySerializer()],
        ['name', string()],
        ['uri', string()],
        ['numMinted', u32()],
        ['currentSize', u32()],
      ],
      { description: 'BaseCollectionV1AccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]),
    })
  ) as Serializer<BaseCollectionV1AccountDataArgs, BaseCollectionV1AccountData>;
}

export function deserializeBaseCollectionV1(
  rawAccount: RpcAccount
): BaseCollectionV1 {
  return deserializeAccount(
    rawAccount,
    getBaseCollectionV1AccountDataSerializer()
  );
}

export async function fetchBaseCollectionV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<BaseCollectionV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'BaseCollectionV1');
  return deserializeBaseCollectionV1(maybeAccount);
}

export async function safeFetchBaseCollectionV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<BaseCollectionV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeBaseCollectionV1(maybeAccount) : null;
}

export async function fetchAllBaseCollectionV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<BaseCollectionV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'BaseCollectionV1');
    return deserializeBaseCollectionV1(maybeAccount);
  });
}

export async function safeFetchAllBaseCollectionV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<BaseCollectionV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeBaseCollectionV1(maybeAccount as RpcAccount)
    );
}

export function getBaseCollectionV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'lockedSolPnft',
    '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      key: KeyArgs;
      updateAuthority: PublicKey;
      name: string;
      uri: string;
      numMinted: number;
      currentSize: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      key: [8, getKeySerializer()],
      updateAuthority: [9, publicKeySerializer()],
      name: [41, string()],
      uri: [null, string()],
      numMinted: [null, u32()],
      currentSize: [null, u32()],
    })
    .deserializeUsing<BaseCollectionV1>((account) =>
      deserializeBaseCollectionV1(account)
    )
    .whereField('discriminator', new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]));
}
