/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidAuthority: Invalid authority */
export class InvalidAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidAuthority';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid authority', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);

/** InvalidVaultBalance: Invalid vault balance */
export class InvalidVaultBalanceError extends ProgramError {
  override readonly name: string = 'InvalidVaultBalance';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid vault balance', program, cause);
  }
}
codeToErrorMap.set(0x1771, InvalidVaultBalanceError);
nameToErrorMap.set('InvalidVaultBalance', InvalidVaultBalanceError);

/** UnauthorizedUpdate: Unauthorized metadata update */
export class UnauthorizedUpdateError extends ProgramError {
  override readonly name: string = 'UnauthorizedUpdate';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Unauthorized metadata update', program, cause);
  }
}
codeToErrorMap.set(0x1772, UnauthorizedUpdateError);
nameToErrorMap.set('UnauthorizedUpdate', UnauthorizedUpdateError);

/** MaxSupplyReached: Maximum supply reached */
export class MaxSupplyReachedError extends ProgramError {
  override readonly name: string = 'MaxSupplyReached';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Maximum supply reached', program, cause);
  }
}
codeToErrorMap.set(0x1773, MaxSupplyReachedError);
nameToErrorMap.set('MaxSupplyReached', MaxSupplyReachedError);

/** InvalidCollection: Invalid collection data */
export class InvalidCollectionError extends ProgramError {
  override readonly name: string = 'InvalidCollection';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid collection data', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidCollectionError);
nameToErrorMap.set('InvalidCollection', InvalidCollectionError);

/** Overflow: Arithmetic overflow */
export class OverflowError extends ProgramError {
  override readonly name: string = 'Overflow';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Arithmetic overflow', program, cause);
  }
}
codeToErrorMap.set(0x1775, OverflowError);
nameToErrorMap.set('Overflow', OverflowError);

/** Underflow: Arithmetic underflow */
export class UnderflowError extends ProgramError {
  override readonly name: string = 'Underflow';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Arithmetic underflow', program, cause);
  }
}
codeToErrorMap.set(0x1776, UnderflowError);
nameToErrorMap.set('Underflow', UnderflowError);

/** InvalidUpdateAuthority: Invalid update authority */
export class InvalidUpdateAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidUpdateAuthority';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Invalid update authority', program, cause);
  }
}
codeToErrorMap.set(0x1777, InvalidUpdateAuthorityError);
nameToErrorMap.set('InvalidUpdateAuthority', InvalidUpdateAuthorityError);

/** InvalidMetadataUpdate: Invalid metadata update */
export class InvalidMetadataUpdateError extends ProgramError {
  override readonly name: string = 'InvalidMetadataUpdate';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Invalid metadata update', program, cause);
  }
}
codeToErrorMap.set(0x1778, InvalidMetadataUpdateError);
nameToErrorMap.set('InvalidMetadataUpdate', InvalidMetadataUpdateError);

/** InsufficientFunds: Insufficient funds for minting */
export class InsufficientFundsError extends ProgramError {
  override readonly name: string = 'InsufficientFunds';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Insufficient funds for minting', program, cause);
  }
}
codeToErrorMap.set(0x1779, InsufficientFundsError);
nameToErrorMap.set('InsufficientFunds', InsufficientFundsError);

/** InvalidMplCoreProgram: Invalid MPL Core program address */
export class InvalidMplCoreProgramError extends ProgramError {
  override readonly name: string = 'InvalidMplCoreProgram';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Invalid MPL Core program address', program, cause);
  }
}
codeToErrorMap.set(0x177a, InvalidMplCoreProgramError);
nameToErrorMap.set('InvalidMplCoreProgram', InvalidMplCoreProgramError);

/** InvalidOwner: Invalid owner signature */
export class InvalidOwnerError extends ProgramError {
  override readonly name: string = 'InvalidOwner';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid owner signature', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidOwnerError);
nameToErrorMap.set('InvalidOwner', InvalidOwnerError);

/** RentCalculationError: Rent calculation failed */
export class RentCalculationErrorError extends ProgramError {
  override readonly name: string = 'RentCalculationError';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Rent calculation failed', program, cause);
  }
}
codeToErrorMap.set(0x177c, RentCalculationErrorError);
nameToErrorMap.set('RentCalculationError', RentCalculationErrorError);

/** InvalidVaultInit: Invalid token vault initialization */
export class InvalidVaultInitError extends ProgramError {
  override readonly name: string = 'InvalidVaultInit';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('Invalid token vault initialization', program, cause);
  }
}
codeToErrorMap.set(0x177d, InvalidVaultInitError);
nameToErrorMap.set('InvalidVaultInit', InvalidVaultInitError);

/** TransferFailed: System transfer failed */
export class TransferFailedError extends ProgramError {
  override readonly name: string = 'TransferFailed';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('System transfer failed', program, cause);
  }
}
codeToErrorMap.set(0x177e, TransferFailedError);
nameToErrorMap.set('TransferFailed', TransferFailedError);

/** InvalidMetadataParams: Invalid metadata parameters */
export class InvalidMetadataParamsError extends ProgramError {
  override readonly name: string = 'InvalidMetadataParams';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Invalid metadata parameters', program, cause);
  }
}
codeToErrorMap.set(0x177f, InvalidMetadataParamsError);
nameToErrorMap.set('InvalidMetadataParams', InvalidMetadataParamsError);

/** AssetCreationFailed: Asset creation failed */
export class AssetCreationFailedError extends ProgramError {
  override readonly name: string = 'AssetCreationFailed';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Asset creation failed', program, cause);
  }
}
codeToErrorMap.set(0x1780, AssetCreationFailedError);
nameToErrorMap.set('AssetCreationFailed', AssetCreationFailedError);

/** InvalidPdaDerivation: Invalid PDA derivation */
export class InvalidPdaDerivationError extends ProgramError {
  override readonly name: string = 'InvalidPdaDerivation';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Invalid PDA derivation', program, cause);
  }
}
codeToErrorMap.set(0x1781, InvalidPdaDerivationError);
nameToErrorMap.set('InvalidPdaDerivation', InvalidPdaDerivationError);

/** StateUpdateFailed: State update failed */
export class StateUpdateFailedError extends ProgramError {
  override readonly name: string = 'StateUpdateFailed';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('State update failed', program, cause);
  }
}
codeToErrorMap.set(0x1782, StateUpdateFailedError);
nameToErrorMap.set('StateUpdateFailed', StateUpdateFailedError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getStorymintErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getStorymintErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
