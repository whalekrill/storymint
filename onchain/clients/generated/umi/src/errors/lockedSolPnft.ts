/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidVaultBalance: Invalid vault balance */
export class InvalidVaultBalanceError extends ProgramError {
  override readonly name: string = 'InvalidVaultBalance';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid vault balance', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidVaultBalanceError);
nameToErrorMap.set('InvalidVaultBalance', InvalidVaultBalanceError);

/** UnauthorizedUpdate: Unauthorized metadata update */
export class UnauthorizedUpdateError extends ProgramError {
  override readonly name: string = 'UnauthorizedUpdate';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Unauthorized metadata update', program, cause);
  }
}
codeToErrorMap.set(0x1771, UnauthorizedUpdateError);
nameToErrorMap.set('UnauthorizedUpdate', UnauthorizedUpdateError);

/** TokenAccountNotClosed: Token account not properly closed */
export class TokenAccountNotClosedError extends ProgramError {
  override readonly name: string = 'TokenAccountNotClosed';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Token account not properly closed', program, cause);
  }
}
codeToErrorMap.set(0x1772, TokenAccountNotClosedError);
nameToErrorMap.set('TokenAccountNotClosed', TokenAccountNotClosedError);

/** MaxSupplyReached: Maximum supply reached */
export class MaxSupplyReachedError extends ProgramError {
  override readonly name: string = 'MaxSupplyReached';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Maximum supply reached', program, cause);
  }
}
codeToErrorMap.set(0x1773, MaxSupplyReachedError);
nameToErrorMap.set('MaxSupplyReached', MaxSupplyReachedError);

/** Overflow: Arithmetic overflow */
export class OverflowError extends ProgramError {
  override readonly name: string = 'Overflow';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Arithmetic overflow', program, cause);
  }
}
codeToErrorMap.set(0x1774, OverflowError);
nameToErrorMap.set('Overflow', OverflowError);

/** InvalidCollection: Invalid collection data */
export class InvalidCollectionError extends ProgramError {
  override readonly name: string = 'InvalidCollection';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Invalid collection data', program, cause);
  }
}
codeToErrorMap.set(0x1775, InvalidCollectionError);
nameToErrorMap.set('InvalidCollection', InvalidCollectionError);

/** Underflow: Arithmetic underflow */
export class UnderflowError extends ProgramError {
  override readonly name: string = 'Underflow';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Arithmetic underflow', program, cause);
  }
}
codeToErrorMap.set(0x1776, UnderflowError);
nameToErrorMap.set('Underflow', UnderflowError);

/** InvalidProgramId: Account is owned by wrong program */
export class InvalidProgramIdError extends ProgramError {
  override readonly name: string = 'InvalidProgramId';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Account is owned by wrong program', program, cause);
  }
}
codeToErrorMap.set(0x1777, InvalidProgramIdError);
nameToErrorMap.set('InvalidProgramId', InvalidProgramIdError);

/** InvalidUpdateAuthority: Invalid update authority */
export class InvalidUpdateAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidUpdateAuthority';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Invalid update authority', program, cause);
  }
}
codeToErrorMap.set(0x1778, InvalidUpdateAuthorityError);
nameToErrorMap.set('InvalidUpdateAuthority', InvalidUpdateAuthorityError);

/** MetadataDeserializationError: Metadata deserialization failed */
export class MetadataDeserializationErrorError extends ProgramError {
  override readonly name: string = 'MetadataDeserializationError';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Metadata deserialization failed', program, cause);
  }
}
codeToErrorMap.set(0x1779, MetadataDeserializationErrorError);
nameToErrorMap.set(
  'MetadataDeserializationError',
  MetadataDeserializationErrorError
);

/** CollectionVerificationError: Collection verification failed */
export class CollectionVerificationErrorError extends ProgramError {
  override readonly name: string = 'CollectionVerificationError';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Collection verification failed', program, cause);
  }
}
codeToErrorMap.set(0x177a, CollectionVerificationErrorError);
nameToErrorMap.set(
  'CollectionVerificationError',
  CollectionVerificationErrorError
);

/** InvalidMetadata: Invalid metadata data */
export class InvalidMetadataError extends ProgramError {
  override readonly name: string = 'InvalidMetadata';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid metadata data', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidMetadataError);
nameToErrorMap.set('InvalidMetadata', InvalidMetadataError);

/** InvalidCollectionVerification: Invalid collection verification */
export class InvalidCollectionVerificationError extends ProgramError {
  override readonly name: string = 'InvalidCollectionVerification';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Invalid collection verification', program, cause);
  }
}
codeToErrorMap.set(0x177c, InvalidCollectionVerificationError);
nameToErrorMap.set(
  'InvalidCollectionVerification',
  InvalidCollectionVerificationError
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getLockedSolPnftErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getLockedSolPnftErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
