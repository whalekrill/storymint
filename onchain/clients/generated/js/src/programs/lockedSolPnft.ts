/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedBurnAndWithdrawInstruction,
  type ParsedInitializeMasterEditionInstruction,
  type ParsedMintPnftInstruction,
  type ParsedUpdateMetadataInstruction,
} from '../instructions';

export const LOCKED_SOL_PNFT_PROGRAM_ADDRESS =
  '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr' as Address<'3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'>;

export enum LockedSolPnftAccount {
  MasterState,
  TokenVault,
}

export function identifyLockedSolPnftAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LockedSolPnftAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([127, 252, 235, 145, 194, 19, 179, 42])
      ),
      0
    )
  ) {
    return LockedSolPnftAccount.MasterState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 7, 84, 254, 151, 228, 43, 144])
      ),
      0
    )
  ) {
    return LockedSolPnftAccount.TokenVault;
  }
  throw new Error(
    'The provided account could not be identified as a lockedSolPnft account.'
  );
}

export enum LockedSolPnftInstruction {
  BurnAndWithdraw,
  InitializeMasterEdition,
  MintPnft,
  UpdateMetadata,
}

export function identifyLockedSolPnftInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LockedSolPnftInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 117, 35, 35, 239, 192, 140, 79])
      ),
      0
    )
  ) {
    return LockedSolPnftInstruction.BurnAndWithdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 153, 201, 57, 96, 128, 94, 181])
      ),
      0
    )
  ) {
    return LockedSolPnftInstruction.InitializeMasterEdition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 40, 243, 254, 133, 205, 199, 93])
      ),
      0
    )
  ) {
    return LockedSolPnftInstruction.MintPnft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 182, 43, 239, 97, 78, 225, 186])
      ),
      0
    )
  ) {
    return LockedSolPnftInstruction.UpdateMetadata;
  }
  throw new Error(
    'The provided instruction could not be identified as a lockedSolPnft instruction.'
  );
}

export type ParsedLockedSolPnftInstruction<
  TProgram extends string = '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr',
> =
  | ({
      instructionType: LockedSolPnftInstruction.BurnAndWithdraw;
    } & ParsedBurnAndWithdrawInstruction<TProgram>)
  | ({
      instructionType: LockedSolPnftInstruction.InitializeMasterEdition;
    } & ParsedInitializeMasterEditionInstruction<TProgram>)
  | ({
      instructionType: LockedSolPnftInstruction.MintPnft;
    } & ParsedMintPnftInstruction<TProgram>)
  | ({
      instructionType: LockedSolPnftInstruction.UpdateMetadata;
    } & ParsedUpdateMetadataInstruction<TProgram>);
