/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedBurnAndWithdrawInstruction,
  type ParsedInitializeCollectionInstruction,
  type ParsedMintAssetInstruction,
  type ParsedUpdateMetadataInstruction,
} from '../instructions';

export const STORYMINT_PROGRAM_ADDRESS =
  '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr' as Address<'3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr'>;

export enum StorymintAccount {
  BaseCollectionV1,
  MasterState,
  TokenVault,
}

export function identifyStorymintAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StorymintAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
      ),
      0
    )
  ) {
    return StorymintAccount.BaseCollectionV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([127, 252, 235, 145, 194, 19, 179, 42])
      ),
      0
    )
  ) {
    return StorymintAccount.MasterState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 7, 84, 254, 151, 228, 43, 144])
      ),
      0
    )
  ) {
    return StorymintAccount.TokenVault;
  }
  throw new Error(
    'The provided account could not be identified as a storymint account.'
  );
}

export enum StorymintInstruction {
  BurnAndWithdraw,
  InitializeCollection,
  MintAsset,
  UpdateMetadata,
}

export function identifyStorymintInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StorymintInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 117, 35, 35, 239, 192, 140, 79])
      ),
      0
    )
  ) {
    return StorymintInstruction.BurnAndWithdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 62, 53, 139, 173, 152, 98, 93])
      ),
      0
    )
  ) {
    return StorymintInstruction.InitializeCollection;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 175, 211, 156, 56, 250, 104, 118])
      ),
      0
    )
  ) {
    return StorymintInstruction.MintAsset;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 182, 43, 239, 97, 78, 225, 186])
      ),
      0
    )
  ) {
    return StorymintInstruction.UpdateMetadata;
  }
  throw new Error(
    'The provided instruction could not be identified as a storymint instruction.'
  );
}

export type ParsedStorymintInstruction<
  TProgram extends string = '3kLyy6249ZFsZyG74b6eSwuvDUVndkFM54cvK8gnietr',
> =
  | ({
      instructionType: StorymintInstruction.BurnAndWithdraw;
    } & ParsedBurnAndWithdrawInstruction<TProgram>)
  | ({
      instructionType: StorymintInstruction.InitializeCollection;
    } & ParsedInitializeCollectionInstruction<TProgram>)
  | ({
      instructionType: StorymintInstruction.MintAsset;
    } & ParsedMintAssetInstruction<TProgram>)
  | ({
      instructionType: StorymintInstruction.UpdateMetadata;
    } & ParsedUpdateMetadataInstruction<TProgram>);
