/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const MASTER_STATE_DISCRIMINATOR = new Uint8Array([
  127, 252, 235, 145, 194, 19, 179, 42,
]);

export function getMasterStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MASTER_STATE_DISCRIMINATOR
  );
}

export type MasterState = {
  discriminator: ReadonlyUint8Array;
  masterMint: Address;
  totalMinted: bigint;
};

export type MasterStateArgs = {
  masterMint: Address;
  totalMinted: number | bigint;
};

export function getMasterStateEncoder(): Encoder<MasterStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['masterMint', getAddressEncoder()],
      ['totalMinted', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MASTER_STATE_DISCRIMINATOR })
  );
}

export function getMasterStateDecoder(): Decoder<MasterState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['masterMint', getAddressDecoder()],
    ['totalMinted', getU64Decoder()],
  ]);
}

export function getMasterStateCodec(): Codec<MasterStateArgs, MasterState> {
  return combineCodec(getMasterStateEncoder(), getMasterStateDecoder());
}

export function decodeMasterState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MasterState, TAddress>;
export function decodeMasterState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MasterState, TAddress>;
export function decodeMasterState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MasterState, TAddress> | MaybeAccount<MasterState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMasterStateDecoder()
  );
}

export async function fetchMasterState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MasterState, TAddress>> {
  const maybeAccount = await fetchMaybeMasterState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMasterState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MasterState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMasterState(maybeAccount);
}

export async function fetchAllMasterState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MasterState>[]> {
  const maybeAccounts = await fetchAllMaybeMasterState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMasterState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MasterState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMasterState(maybeAccount));
}
