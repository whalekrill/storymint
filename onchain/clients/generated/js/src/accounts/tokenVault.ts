/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const TOKEN_VAULT_DISCRIMINATOR = new Uint8Array([
  121, 7, 84, 254, 151, 228, 43, 144,
]);

export function getTokenVaultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TOKEN_VAULT_DISCRIMINATOR);
}

export type TokenVault = { discriminator: ReadonlyUint8Array; mint: Address };

export type TokenVaultArgs = { mint: Address };

export function getTokenVaultEncoder(): Encoder<TokenVaultArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mint', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_VAULT_DISCRIMINATOR })
  );
}

export function getTokenVaultDecoder(): Decoder<TokenVault> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mint', getAddressDecoder()],
  ]);
}

export function getTokenVaultCodec(): Codec<TokenVaultArgs, TokenVault> {
  return combineCodec(getTokenVaultEncoder(), getTokenVaultDecoder());
}

export function decodeTokenVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenVault, TAddress>;
export function decodeTokenVault<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenVault, TAddress>;
export function decodeTokenVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TokenVault, TAddress> | MaybeAccount<TokenVault, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenVaultDecoder()
  );
}

export async function fetchTokenVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenVault, TAddress>> {
  const maybeAccount = await fetchMaybeTokenVault(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenVault, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenVault(maybeAccount);
}

export async function fetchAllTokenVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenVault>[]> {
  const maybeAccounts = await fetchAllMaybeTokenVault(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenVault>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenVault(maybeAccount));
}
