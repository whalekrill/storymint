/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKED_SOL_PNFT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MINT_PNFT_DISCRIMINATOR = new Uint8Array([
  10, 40, 243, 254, 133, 205, 199, 93,
]);

export function getMintPnftDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_PNFT_DISCRIMINATOR);
}

export type MintPnftInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountMasterState extends string | IAccountMeta<string> = string,
  TAccountMasterMint extends string | IAccountMeta<string> = string,
  TAccountCollectionMetadata extends string | IAccountMeta<string> = string,
  TAccountCollectionMasterEdition extends
    | string
    | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountMasterEdition extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountCollectionAuthorityRecord extends
    | string
    | IAccountMeta<string> = string,
  TAccountDelegateAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMasterState extends string
        ? WritableAccount<TAccountMasterState>
        : TAccountMasterState,
      TAccountMasterMint extends string
        ? ReadonlyAccount<TAccountMasterMint>
        : TAccountMasterMint,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountCollectionMasterEdition extends string
        ? ReadonlyAccount<TAccountCollectionMasterEdition>
        : TAccountCollectionMasterEdition,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMasterEdition extends string
        ? WritableAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountMint extends string
        ? WritableSignerAccount<TAccountMint> & IAccountSignerMeta<TAccountMint>
        : TAccountMint,
      TAccountMintAuthority extends string
        ? ReadonlyAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountCollectionAuthorityRecord extends string
        ? WritableAccount<TAccountCollectionAuthorityRecord>
        : TAccountCollectionAuthorityRecord,
      TAccountDelegateAuthority extends string
        ? WritableAccount<TAccountDelegateAuthority>
        : TAccountDelegateAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintPnftInstructionData = { discriminator: ReadonlyUint8Array };

export type MintPnftInstructionDataArgs = {};

export function getMintPnftInstructionDataEncoder(): Encoder<MintPnftInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MINT_PNFT_DISCRIMINATOR })
  );
}

export function getMintPnftInstructionDataDecoder(): Decoder<MintPnftInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMintPnftInstructionDataCodec(): Codec<
  MintPnftInstructionDataArgs,
  MintPnftInstructionData
> {
  return combineCodec(
    getMintPnftInstructionDataEncoder(),
    getMintPnftInstructionDataDecoder()
  );
}

export type MintPnftAsyncInput<
  TAccountPayer extends string = string,
  TAccountVault extends string = string,
  TAccountMasterState extends string = string,
  TAccountMasterMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionMasterEdition extends string = string,
  TAccountMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountMint extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountDelegateAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  vault?: Address<TAccountVault>;
  masterState: Address<TAccountMasterState>;
  masterMint: Address<TAccountMasterMint>;
  collectionMetadata: Address<TAccountCollectionMetadata>;
  collectionMasterEdition: Address<TAccountCollectionMasterEdition>;
  metadata: Address<TAccountMetadata>;
  masterEdition: Address<TAccountMasterEdition>;
  mint: TransactionSigner<TAccountMint>;
  mintAuthority?: Address<TAccountMintAuthority>;
  tokenAccount: Address<TAccountTokenAccount>;
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  delegateAuthority?: Address<TAccountDelegateAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
};

export async function getMintPnftInstructionAsync<
  TAccountPayer extends string,
  TAccountVault extends string,
  TAccountMasterState extends string,
  TAccountMasterMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionMasterEdition extends string,
  TAccountMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountMint extends string,
  TAccountMintAuthority extends string,
  TAccountTokenAccount extends string,
  TAccountCollectionAuthorityRecord extends string,
  TAccountDelegateAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: MintPnftAsyncInput<
    TAccountPayer,
    TAccountVault,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountMint,
    TAccountMintAuthority,
    TAccountTokenAccount,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintPnftInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountVault,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountMint,
    TAccountMintAuthority,
    TAccountTokenAccount,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    masterMint: { value: input.masterMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionMasterEdition: {
      value: input.collectionMasterEdition ?? null,
      isWritable: false,
    },
    metadata: { value: input.metadata ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.mintAuthority.value) {
    accounts.mintAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 105, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.delegateAuthority.value) {
    accounts.delegateAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 95, 100, 101, 108,
            101, 103, 97, 116, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.masterMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.masterMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionMasterEdition),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    programAddress,
    data: getMintPnftInstructionDataEncoder().encode({}),
  } as MintPnftInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountVault,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountMint,
    TAccountMintAuthority,
    TAccountTokenAccount,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >;

  return instruction;
}

export type MintPnftInput<
  TAccountPayer extends string = string,
  TAccountVault extends string = string,
  TAccountMasterState extends string = string,
  TAccountMasterMint extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionMasterEdition extends string = string,
  TAccountMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountMint extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountDelegateAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  vault: Address<TAccountVault>;
  masterState: Address<TAccountMasterState>;
  masterMint: Address<TAccountMasterMint>;
  collectionMetadata: Address<TAccountCollectionMetadata>;
  collectionMasterEdition: Address<TAccountCollectionMasterEdition>;
  metadata: Address<TAccountMetadata>;
  masterEdition: Address<TAccountMasterEdition>;
  mint: TransactionSigner<TAccountMint>;
  mintAuthority: Address<TAccountMintAuthority>;
  tokenAccount: Address<TAccountTokenAccount>;
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  delegateAuthority: Address<TAccountDelegateAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
};

export function getMintPnftInstruction<
  TAccountPayer extends string,
  TAccountVault extends string,
  TAccountMasterState extends string,
  TAccountMasterMint extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionMasterEdition extends string,
  TAccountMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountMint extends string,
  TAccountMintAuthority extends string,
  TAccountTokenAccount extends string,
  TAccountCollectionAuthorityRecord extends string,
  TAccountDelegateAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: MintPnftInput<
    TAccountPayer,
    TAccountVault,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountMint,
    TAccountMintAuthority,
    TAccountTokenAccount,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintPnftInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountVault,
  TAccountMasterState,
  TAccountMasterMint,
  TAccountCollectionMetadata,
  TAccountCollectionMasterEdition,
  TAccountMetadata,
  TAccountMasterEdition,
  TAccountMint,
  TAccountMintAuthority,
  TAccountTokenAccount,
  TAccountCollectionAuthorityRecord,
  TAccountDelegateAuthority,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountTokenMetadataProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    masterMint: { value: input.masterMint ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionMasterEdition: {
      value: input.collectionMasterEdition ?? null,
      isWritable: false,
    },
    metadata: { value: input.metadata ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.masterMint),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionMasterEdition),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    programAddress,
    data: getMintPnftInstructionDataEncoder().encode({}),
  } as MintPnftInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountVault,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountMint,
    TAccountMintAuthority,
    TAccountTokenAccount,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >;

  return instruction;
}

export type ParsedMintPnftInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    vault: TAccountMetas[1];
    masterState: TAccountMetas[2];
    masterMint: TAccountMetas[3];
    collectionMetadata: TAccountMetas[4];
    collectionMasterEdition: TAccountMetas[5];
    metadata: TAccountMetas[6];
    masterEdition: TAccountMetas[7];
    mint: TAccountMetas[8];
    mintAuthority: TAccountMetas[9];
    tokenAccount: TAccountMetas[10];
    collectionAuthorityRecord: TAccountMetas[11];
    delegateAuthority: TAccountMetas[12];
    tokenProgram: TAccountMetas[13];
    associatedTokenProgram: TAccountMetas[14];
    systemProgram: TAccountMetas[15];
    rent: TAccountMetas[16];
    tokenMetadataProgram: TAccountMetas[17];
  };
  data: MintPnftInstructionData;
};

export function parseMintPnftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintPnftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      vault: getNextAccount(),
      masterState: getNextAccount(),
      masterMint: getNextAccount(),
      collectionMetadata: getNextAccount(),
      collectionMasterEdition: getNextAccount(),
      metadata: getNextAccount(),
      masterEdition: getNextAccount(),
      mint: getNextAccount(),
      mintAuthority: getNextAccount(),
      tokenAccount: getNextAccount(),
      collectionAuthorityRecord: getNextAccount(),
      delegateAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
    },
    data: getMintPnftInstructionDataDecoder().decode(instruction.data),
  };
}
