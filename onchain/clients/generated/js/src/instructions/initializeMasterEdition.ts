/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKED_SOL_PNFT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_MASTER_EDITION_DISCRIMINATOR = new Uint8Array([
  175, 153, 201, 57, 96, 128, 94, 181,
]);

export function getInitializeMasterEditionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_MASTER_EDITION_DISCRIMINATOR
  );
}

export type InitializeMasterEditionInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMasterState extends string | IAccountMeta<string> = string,
  TAccountMasterMint extends string | IAccountMeta<string> = string,
  TAccountMasterMetadata extends string | IAccountMeta<string> = string,
  TAccountMasterEdition extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthorityToken extends string | IAccountMeta<string> = string,
  TAccountCollectionAuthorityRecord extends
    | string
    | IAccountMeta<string> = string,
  TAccountDelegateAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMasterState extends string
        ? WritableAccount<TAccountMasterState>
        : TAccountMasterState,
      TAccountMasterMint extends string
        ? WritableAccount<TAccountMasterMint>
        : TAccountMasterMint,
      TAccountMasterMetadata extends string
        ? WritableAccount<TAccountMasterMetadata>
        : TAccountMasterMetadata,
      TAccountMasterEdition extends string
        ? WritableAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountUpdateAuthority extends string
        ? WritableSignerAccount<TAccountUpdateAuthority> &
            IAccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountUpdateAuthorityToken extends string
        ? WritableAccount<TAccountUpdateAuthorityToken>
        : TAccountUpdateAuthorityToken,
      TAccountCollectionAuthorityRecord extends string
        ? WritableAccount<TAccountCollectionAuthorityRecord>
        : TAccountCollectionAuthorityRecord,
      TAccountDelegateAuthority extends string
        ? WritableAccount<TAccountDelegateAuthority>
        : TAccountDelegateAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMasterEditionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeMasterEditionInstructionDataArgs = {};

export function getInitializeMasterEditionInstructionDataEncoder(): Encoder<InitializeMasterEditionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_MASTER_EDITION_DISCRIMINATOR,
    })
  );
}

export function getInitializeMasterEditionInstructionDataDecoder(): Decoder<InitializeMasterEditionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeMasterEditionInstructionDataCodec(): Codec<
  InitializeMasterEditionInstructionDataArgs,
  InitializeMasterEditionInstructionData
> {
  return combineCodec(
    getInitializeMasterEditionInstructionDataEncoder(),
    getInitializeMasterEditionInstructionDataDecoder()
  );
}

export type InitializeMasterEditionAsyncInput<
  TAccountPayer extends string = string,
  TAccountMasterState extends string = string,
  TAccountMasterMint extends string = string,
  TAccountMasterMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountUpdateAuthorityToken extends string = string,
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountDelegateAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  masterState?: Address<TAccountMasterState>;
  masterMint?: Address<TAccountMasterMint>;
  masterMetadata: Address<TAccountMasterMetadata>;
  masterEdition: Address<TAccountMasterEdition>;
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  updateAuthorityToken: Address<TAccountUpdateAuthorityToken>;
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  delegateAuthority?: Address<TAccountDelegateAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
};

export async function getInitializeMasterEditionInstructionAsync<
  TAccountPayer extends string,
  TAccountMasterState extends string,
  TAccountMasterMint extends string,
  TAccountMasterMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountUpdateAuthority extends string,
  TAccountUpdateAuthorityToken extends string,
  TAccountCollectionAuthorityRecord extends string,
  TAccountDelegateAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: InitializeMasterEditionAsyncInput<
    TAccountPayer,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountMasterMetadata,
    TAccountMasterEdition,
    TAccountUpdateAuthority,
    TAccountUpdateAuthorityToken,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeMasterEditionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountMasterMetadata,
    TAccountMasterEdition,
    TAccountUpdateAuthority,
    TAccountUpdateAuthorityToken,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    masterMint: { value: input.masterMint ?? null, isWritable: true },
    masterMetadata: { value: input.masterMetadata ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    updateAuthorityToken: {
      value: input.updateAuthorityToken ?? null,
      isWritable: true,
    },
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.masterMint.value) {
    accounts.masterMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 97, 115, 116, 101, 114, 95, 109, 105, 110, 116])
        ),
      ],
    });
  }
  if (!accounts.masterState.value) {
    accounts.masterState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 115, 116, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.masterMint.value)),
      ],
    });
  }
  if (!accounts.delegateAuthority.value) {
    accounts.delegateAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 95, 100, 101, 108,
            101, 103, 97, 116, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.masterMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.masterMint),
      getAccountMeta(accounts.masterMetadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.updateAuthorityToken),
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    programAddress,
    data: getInitializeMasterEditionInstructionDataEncoder().encode({}),
  } as InitializeMasterEditionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountMasterMetadata,
    TAccountMasterEdition,
    TAccountUpdateAuthority,
    TAccountUpdateAuthorityToken,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >;

  return instruction;
}

export type InitializeMasterEditionInput<
  TAccountPayer extends string = string,
  TAccountMasterState extends string = string,
  TAccountMasterMint extends string = string,
  TAccountMasterMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountUpdateAuthorityToken extends string = string,
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountDelegateAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  masterState: Address<TAccountMasterState>;
  masterMint: Address<TAccountMasterMint>;
  masterMetadata: Address<TAccountMasterMetadata>;
  masterEdition: Address<TAccountMasterEdition>;
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  updateAuthorityToken: Address<TAccountUpdateAuthorityToken>;
  collectionAuthorityRecord: Address<TAccountCollectionAuthorityRecord>;
  delegateAuthority: Address<TAccountDelegateAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
};

export function getInitializeMasterEditionInstruction<
  TAccountPayer extends string,
  TAccountMasterState extends string,
  TAccountMasterMint extends string,
  TAccountMasterMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountUpdateAuthority extends string,
  TAccountUpdateAuthorityToken extends string,
  TAccountCollectionAuthorityRecord extends string,
  TAccountDelegateAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: InitializeMasterEditionInput<
    TAccountPayer,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountMasterMetadata,
    TAccountMasterEdition,
    TAccountUpdateAuthority,
    TAccountUpdateAuthorityToken,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeMasterEditionInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountMasterState,
  TAccountMasterMint,
  TAccountMasterMetadata,
  TAccountMasterEdition,
  TAccountUpdateAuthority,
  TAccountUpdateAuthorityToken,
  TAccountCollectionAuthorityRecord,
  TAccountDelegateAuthority,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent,
  TAccountTokenMetadataProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    masterMint: { value: input.masterMint ?? null, isWritable: true },
    masterMetadata: { value: input.masterMetadata ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    updateAuthorityToken: {
      value: input.updateAuthorityToken ?? null,
      isWritable: true,
    },
    collectionAuthorityRecord: {
      value: input.collectionAuthorityRecord ?? null,
      isWritable: true,
    },
    delegateAuthority: {
      value: input.delegateAuthority ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.masterMint),
      getAccountMeta(accounts.masterMetadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.updateAuthorityToken),
      getAccountMeta(accounts.collectionAuthorityRecord),
      getAccountMeta(accounts.delegateAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    programAddress,
    data: getInitializeMasterEditionInstructionDataEncoder().encode({}),
  } as InitializeMasterEditionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMasterState,
    TAccountMasterMint,
    TAccountMasterMetadata,
    TAccountMasterEdition,
    TAccountUpdateAuthority,
    TAccountUpdateAuthorityToken,
    TAccountCollectionAuthorityRecord,
    TAccountDelegateAuthority,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent,
    TAccountTokenMetadataProgram
  >;

  return instruction;
}

export type ParsedInitializeMasterEditionInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    masterState: TAccountMetas[1];
    masterMint: TAccountMetas[2];
    masterMetadata: TAccountMetas[3];
    masterEdition: TAccountMetas[4];
    updateAuthority: TAccountMetas[5];
    updateAuthorityToken: TAccountMetas[6];
    collectionAuthorityRecord: TAccountMetas[7];
    delegateAuthority: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    associatedTokenProgram: TAccountMetas[11];
    rent: TAccountMetas[12];
    tokenMetadataProgram: TAccountMetas[13];
  };
  data: InitializeMasterEditionInstructionData;
};

export function parseInitializeMasterEditionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeMasterEditionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      masterState: getNextAccount(),
      masterMint: getNextAccount(),
      masterMetadata: getNextAccount(),
      masterEdition: getNextAccount(),
      updateAuthority: getNextAccount(),
      updateAuthorityToken: getNextAccount(),
      collectionAuthorityRecord: getNextAccount(),
      delegateAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
    },
    data: getInitializeMasterEditionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
