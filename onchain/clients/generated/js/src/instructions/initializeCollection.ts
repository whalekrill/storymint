/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKED_SOL_PNFT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_COLLECTION_DISCRIMINATOR = new Uint8Array([
  112, 62, 53, 139, 173, 152, 98, 93,
]);

export function getInitializeCollectionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_COLLECTION_DISCRIMINATOR
  );
}

export type InitializeCollectionInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMasterState extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMplCore extends
    | string
    | IAccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMasterState extends string
        ? WritableAccount<TAccountMasterState>
        : TAccountMasterState,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountUpdateAuthority extends string
        ? WritableSignerAccount<TAccountUpdateAuthority> &
            IAccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMplCore extends string
        ? ReadonlyAccount<TAccountMplCore>
        : TAccountMplCore,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCollectionInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  uri: string;
};

export type InitializeCollectionInstructionDataArgs = {
  name: string;
  uri: string;
};

export function getInitializeCollectionInstructionDataEncoder(): Encoder<InitializeCollectionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_COLLECTION_DISCRIMINATOR,
    })
  );
}

export function getInitializeCollectionInstructionDataDecoder(): Decoder<InitializeCollectionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getInitializeCollectionInstructionDataCodec(): Codec<
  InitializeCollectionInstructionDataArgs,
  InitializeCollectionInstructionData
> {
  return combineCodec(
    getInitializeCollectionInstructionDataEncoder(),
    getInitializeCollectionInstructionDataDecoder()
  );
}

export type InitializeCollectionAsyncInput<
  TAccountPayer extends string = string,
  TAccountMasterState extends string = string,
  TAccountCollection extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCore extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  masterState?: Address<TAccountMasterState>;
  collection: Address<TAccountCollection>;
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCore?: Address<TAccountMplCore>;
  name: InitializeCollectionInstructionDataArgs['name'];
  uri: InitializeCollectionInstructionDataArgs['uri'];
};

export async function getInitializeCollectionInstructionAsync<
  TAccountPayer extends string,
  TAccountMasterState extends string,
  TAccountCollection extends string,
  TAccountUpdateAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountMplCore extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: InitializeCollectionAsyncInput<
    TAccountPayer,
    TAccountMasterState,
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountMplCore
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeCollectionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMasterState,
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountMplCore
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCore: { value: input.mplCore ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.masterState.value) {
    accounts.masterState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 115, 116, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.collection.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCore.value) {
    accounts.mplCore.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCore),
    ],
    programAddress,
    data: getInitializeCollectionInstructionDataEncoder().encode(
      args as InitializeCollectionInstructionDataArgs
    ),
  } as InitializeCollectionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMasterState,
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountMplCore
  >;

  return instruction;
}

export type InitializeCollectionInput<
  TAccountPayer extends string = string,
  TAccountMasterState extends string = string,
  TAccountCollection extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCore extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  masterState: Address<TAccountMasterState>;
  collection: Address<TAccountCollection>;
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCore?: Address<TAccountMplCore>;
  name: InitializeCollectionInstructionDataArgs['name'];
  uri: InitializeCollectionInstructionDataArgs['uri'];
};

export function getInitializeCollectionInstruction<
  TAccountPayer extends string,
  TAccountMasterState extends string,
  TAccountCollection extends string,
  TAccountUpdateAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountMplCore extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: InitializeCollectionInput<
    TAccountPayer,
    TAccountMasterState,
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountMplCore
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCollectionInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountMasterState,
  TAccountCollection,
  TAccountUpdateAuthority,
  TAccountSystemProgram,
  TAccountMplCore
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCore: { value: input.mplCore ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCore.value) {
    accounts.mplCore.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCore),
    ],
    programAddress,
    data: getInitializeCollectionInstructionDataEncoder().encode(
      args as InitializeCollectionInstructionDataArgs
    ),
  } as InitializeCollectionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMasterState,
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountSystemProgram,
    TAccountMplCore
  >;

  return instruction;
}

export type ParsedInitializeCollectionInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    masterState: TAccountMetas[1];
    collection: TAccountMetas[2];
    updateAuthority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    mplCore: TAccountMetas[5];
  };
  data: InitializeCollectionInstructionData;
};

export function parseInitializeCollectionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeCollectionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      masterState: getNextAccount(),
      collection: getNextAccount(),
      updateAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
      mplCore: getNextAccount(),
    },
    data: getInitializeCollectionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
