/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKED_SOL_PNFT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BURN_AND_WITHDRAW_DISCRIMINATOR = new Uint8Array([
  216, 117, 35, 35, 239, 192, 140, 79,
]);

export function getBurnAndWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BURN_AND_WITHDRAW_DISCRIMINATOR
  );
}

export type BurnAndWithdrawInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMasterState extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSysvarInstructions extends string | IAccountMeta<string> = string,
  TAccountEditionMarker extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountMasterState extends string
        ? WritableAccount<TAccountMasterState>
        : TAccountMasterState,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      TAccountEditionMarker extends string
        ? WritableAccount<TAccountEditionMarker>
        : TAccountEditionMarker,
      ...TRemainingAccounts,
    ]
  >;

export type BurnAndWithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type BurnAndWithdrawInstructionDataArgs = {};

export function getBurnAndWithdrawInstructionDataEncoder(): Encoder<BurnAndWithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: BURN_AND_WITHDRAW_DISCRIMINATOR })
  );
}

export function getBurnAndWithdrawInstructionDataDecoder(): Decoder<BurnAndWithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getBurnAndWithdrawInstructionDataCodec(): Codec<
  BurnAndWithdrawInstructionDataArgs,
  BurnAndWithdrawInstructionData
> {
  return combineCodec(
    getBurnAndWithdrawInstructionDataEncoder(),
    getBurnAndWithdrawInstructionDataDecoder()
  );
}

export type BurnAndWithdrawAsyncInput<
  TAccountOwner extends string = string,
  TAccountMasterState extends string = string,
  TAccountVault extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountEditionMarker extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  masterState: Address<TAccountMasterState>;
  vault?: Address<TAccountVault>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  metadata?: Address<TAccountMetadata>;
  tokenAccount: Address<TAccountTokenAccount>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  sysvarInstructions: Address<TAccountSysvarInstructions>;
  editionMarker?: Address<TAccountEditionMarker>;
};

export async function getBurnAndWithdrawInstructionAsync<
  TAccountOwner extends string,
  TAccountMasterState extends string,
  TAccountVault extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountMetadata extends string,
  TAccountTokenAccount extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountSysvarInstructions extends string,
  TAccountEditionMarker extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: BurnAndWithdrawAsyncInput<
    TAccountOwner,
    TAccountMasterState,
    TAccountVault,
    TAccountTokenMetadataProgram,
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountSysvarInstructions,
    TAccountEditionMarker
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BurnAndWithdrawInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountMasterState,
    TAccountVault,
    TAccountTokenMetadataProgram,
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountSysvarInstructions,
    TAccountEditionMarker
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    editionMarker: { value: input.editionMarker ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.metadata.value) {
    accounts.metadata.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            11, 112, 101, 177, 227, 209, 124, 69, 56, 157, 82, 127, 107, 4, 195,
            205, 88, 184, 108, 115, 26, 160, 253, 181, 73, 182, 209, 188, 3,
            248, 41, 70,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.editionMarker.value) {
    accounts.editionMarker.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            11, 112, 101, 177, 227, 209, 124, 69, 56, 157, 82, 127, 107, 4, 195,
            205, 88, 184, 108, 115, 26, 160, 253, 181, 73, 182, 209, 188, 3,
            248, 41, 70,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
        getBytesEncoder().encode(
          new Uint8Array([101, 100, 105, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.editionMarker),
    ],
    programAddress,
    data: getBurnAndWithdrawInstructionDataEncoder().encode({}),
  } as BurnAndWithdrawInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountMasterState,
    TAccountVault,
    TAccountTokenMetadataProgram,
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountSysvarInstructions,
    TAccountEditionMarker
  >;

  return instruction;
}

export type BurnAndWithdrawInput<
  TAccountOwner extends string = string,
  TAccountMasterState extends string = string,
  TAccountVault extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountSysvarInstructions extends string = string,
  TAccountEditionMarker extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  masterState: Address<TAccountMasterState>;
  vault: Address<TAccountVault>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  metadata: Address<TAccountMetadata>;
  tokenAccount: Address<TAccountTokenAccount>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  sysvarInstructions: Address<TAccountSysvarInstructions>;
  editionMarker: Address<TAccountEditionMarker>;
};

export function getBurnAndWithdrawInstruction<
  TAccountOwner extends string,
  TAccountMasterState extends string,
  TAccountVault extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountMetadata extends string,
  TAccountTokenAccount extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountSysvarInstructions extends string,
  TAccountEditionMarker extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: BurnAndWithdrawInput<
    TAccountOwner,
    TAccountMasterState,
    TAccountVault,
    TAccountTokenMetadataProgram,
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountSysvarInstructions,
    TAccountEditionMarker
  >,
  config?: { programAddress?: TProgramAddress }
): BurnAndWithdrawInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountMasterState,
  TAccountVault,
  TAccountTokenMetadataProgram,
  TAccountMetadata,
  TAccountTokenAccount,
  TAccountMint,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountSysvarInstructions,
  TAccountEditionMarker
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
    editionMarker: { value: input.editionMarker ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.sysvarInstructions),
      getAccountMeta(accounts.editionMarker),
    ],
    programAddress,
    data: getBurnAndWithdrawInstructionDataEncoder().encode({}),
  } as BurnAndWithdrawInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountMasterState,
    TAccountVault,
    TAccountTokenMetadataProgram,
    TAccountMetadata,
    TAccountTokenAccount,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountSysvarInstructions,
    TAccountEditionMarker
  >;

  return instruction;
}

export type ParsedBurnAndWithdrawInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    masterState: TAccountMetas[1];
    vault: TAccountMetas[2];
    tokenMetadataProgram: TAccountMetas[3];
    metadata: TAccountMetas[4];
    tokenAccount: TAccountMetas[5];
    mint: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
    sysvarInstructions: TAccountMetas[10];
    editionMarker: TAccountMetas[11];
  };
  data: BurnAndWithdrawInstructionData;
};

export function parseBurnAndWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBurnAndWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      masterState: getNextAccount(),
      vault: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      metadata: getNextAccount(),
      tokenAccount: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      sysvarInstructions: getNextAccount(),
      editionMarker: getNextAccount(),
    },
    data: getBurnAndWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
