/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKED_SOL_PNFT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getUpdateMetadataArgsDecoder,
  getUpdateMetadataArgsEncoder,
  type UpdateMetadataArgs,
  type UpdateMetadataArgsArgs,
} from '../types';

export const UPDATE_METADATA_DISCRIMINATOR = new Uint8Array([
  170, 182, 43, 239, 97, 78, 225, 186,
]);

export function getUpdateMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_METADATA_DISCRIMINATOR
  );
}

export type UpdateMetadataInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountAsset extends string | IAccountMeta<string> = string,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountLogWrapper extends string | IAccountMeta<string> = string,
  TAccountMplCore extends
    | string
    | IAccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountMplCore extends string
        ? ReadonlyAccount<TAccountMplCore>
        : TAccountMplCore,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: UpdateMetadataArgs;
};

export type UpdateMetadataInstructionDataArgs = {
  args: UpdateMetadataArgsArgs;
};

export function getUpdateMetadataInstructionDataEncoder(): Encoder<UpdateMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getUpdateMetadataArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_METADATA_DISCRIMINATOR })
  );
}

export function getUpdateMetadataInstructionDataDecoder(): Decoder<UpdateMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getUpdateMetadataArgsDecoder()],
  ]);
}

export function getUpdateMetadataInstructionDataCodec(): Codec<
  UpdateMetadataInstructionDataArgs,
  UpdateMetadataInstructionData
> {
  return combineCodec(
    getUpdateMetadataInstructionDataEncoder(),
    getUpdateMetadataInstructionDataDecoder()
  );
}

export type UpdateMetadataInput<
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountMplCore extends string = string,
> = {
  /** The asset to update */
  asset: Address<TAccountAsset>;
  /** The collection this asset belongs to (optional) */
  collection?: Address<TAccountCollection>;
  authority: TransactionSigner<TAccountAuthority>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  logWrapper?: Address<TAccountLogWrapper>;
  mplCore?: Address<TAccountMplCore>;
  args: UpdateMetadataInstructionDataArgs['args'];
};

export function getUpdateMetadataInstruction<
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountLogWrapper extends string,
  TAccountMplCore extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataInput<
    TAccountAsset,
    TAccountCollection,
    TAccountAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountLogWrapper,
    TAccountMplCore
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMetadataInstruction<
  TProgramAddress,
  TAccountAsset,
  TAccountCollection,
  TAccountAuthority,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountLogWrapper,
  TAccountMplCore
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    mplCore: { value: input.mplCore ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCore.value) {
    accounts.mplCore.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.mplCore),
    ],
    programAddress,
    data: getUpdateMetadataInstructionDataEncoder().encode(
      args as UpdateMetadataInstructionDataArgs
    ),
  } as UpdateMetadataInstruction<
    TProgramAddress,
    TAccountAsset,
    TAccountCollection,
    TAccountAuthority,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountLogWrapper,
    TAccountMplCore
  >;

  return instruction;
}

export type ParsedUpdateMetadataInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The asset to update */
    asset: TAccountMetas[0];
    /** The collection this asset belongs to (optional) */
    collection?: TAccountMetas[1] | undefined;
    authority: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    logWrapper?: TAccountMetas[5] | undefined;
    mplCore: TAccountMetas[6];
  };
  data: UpdateMetadataInstructionData;
};

export function parseUpdateMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === LOCKED_SOL_PNFT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      asset: getNextAccount(),
      collection: getNextOptionalAccount(),
      authority: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      logWrapper: getNextOptionalAccount(),
      mplCore: getNextAccount(),
    },
    data: getUpdateMetadataInstructionDataDecoder().decode(instruction.data),
  };
}
