/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LOCKED_SOL_PNFT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_METADATA_DISCRIMINATOR = new Uint8Array([
  170, 182, 43, 239, 97, 78, 225, 186,
]);

export function getUpdateMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_METADATA_DISCRIMINATOR
  );
}

export type UpdateMetadataInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountServerAuthority extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountMasterState extends string | IAccountMeta<string> = string,
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountServerAuthority extends string
        ? WritableSignerAccount<TAccountServerAuthority> &
            IAccountSignerMeta<TAccountServerAuthority>
        : TAccountServerAuthority,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMasterState extends string
        ? WritableAccount<TAccountMasterState>
        : TAccountMasterState,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  newUri: string;
  newName: Option<string>;
};

export type UpdateMetadataInstructionDataArgs = {
  newUri: string;
  newName: OptionOrNullable<string>;
};

export function getUpdateMetadataInstructionDataEncoder(): Encoder<UpdateMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'newName',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_METADATA_DISCRIMINATOR })
  );
}

export function getUpdateMetadataInstructionDataDecoder(): Decoder<UpdateMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'newName',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getUpdateMetadataInstructionDataCodec(): Codec<
  UpdateMetadataInstructionDataArgs,
  UpdateMetadataInstructionData
> {
  return combineCodec(
    getUpdateMetadataInstructionDataEncoder(),
    getUpdateMetadataInstructionDataDecoder()
  );
}

export type UpdateMetadataAsyncInput<
  TAccountServerAuthority extends string = string,
  TAccountVault extends string = string,
  TAccountMasterState extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  serverAuthority: TransactionSigner<TAccountServerAuthority>;
  vault?: Address<TAccountVault>;
  masterState: Address<TAccountMasterState>;
  metadata?: Address<TAccountMetadata>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  newUri: UpdateMetadataInstructionDataArgs['newUri'];
  newName: UpdateMetadataInstructionDataArgs['newName'];
};

export async function getUpdateMetadataInstructionAsync<
  TAccountServerAuthority extends string,
  TAccountVault extends string,
  TAccountMasterState extends string,
  TAccountMetadata extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataAsyncInput<
    TAccountServerAuthority,
    TAccountVault,
    TAccountMasterState,
    TAccountMetadata,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateMetadataInstruction<
    TProgramAddress,
    TAccountServerAuthority,
    TAccountVault,
    TAccountMasterState,
    TAccountMetadata,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    serverAuthority: { value: input.serverAuthority ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.metadata.value) {
    accounts.metadata.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            11, 112, 101, 177, 227, 209, 124, 69, 56, 157, 82, 127, 107, 4, 195,
            205, 88, 184, 108, 115, 26, 160, 253, 181, 73, 182, 209, 188, 3,
            248, 41, 70,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.serverAuthority),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateMetadataInstructionDataEncoder().encode(
      args as UpdateMetadataInstructionDataArgs
    ),
  } as UpdateMetadataInstruction<
    TProgramAddress,
    TAccountServerAuthority,
    TAccountVault,
    TAccountMasterState,
    TAccountMetadata,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type UpdateMetadataInput<
  TAccountServerAuthority extends string = string,
  TAccountVault extends string = string,
  TAccountMasterState extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  serverAuthority: TransactionSigner<TAccountServerAuthority>;
  vault: Address<TAccountVault>;
  masterState: Address<TAccountMasterState>;
  metadata: Address<TAccountMetadata>;
  mint: Address<TAccountMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  newUri: UpdateMetadataInstructionDataArgs['newUri'];
  newName: UpdateMetadataInstructionDataArgs['newName'];
};

export function getUpdateMetadataInstruction<
  TAccountServerAuthority extends string,
  TAccountVault extends string,
  TAccountMasterState extends string,
  TAccountMetadata extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
>(
  input: UpdateMetadataInput<
    TAccountServerAuthority,
    TAccountVault,
    TAccountMasterState,
    TAccountMetadata,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMetadataInstruction<
  TProgramAddress,
  TAccountServerAuthority,
  TAccountVault,
  TAccountMasterState,
  TAccountMetadata,
  TAccountMint,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LOCKED_SOL_PNFT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    serverAuthority: { value: input.serverAuthority ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    masterState: { value: input.masterState ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.serverAuthority),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.masterState),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateMetadataInstructionDataEncoder().encode(
      args as UpdateMetadataInstructionDataArgs
    ),
  } as UpdateMetadataInstruction<
    TProgramAddress,
    TAccountServerAuthority,
    TAccountVault,
    TAccountMasterState,
    TAccountMetadata,
    TAccountMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateMetadataInstruction<
  TProgram extends string = typeof LOCKED_SOL_PNFT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    serverAuthority: TAccountMetas[0];
    vault: TAccountMetas[1];
    masterState: TAccountMetas[2];
    metadata: TAccountMetas[3];
    mint: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: UpdateMetadataInstructionData;
};

export function parseUpdateMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      serverAuthority: getNextAccount(),
      vault: getNextAccount(),
      masterState: getNextAccount(),
      metadata: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateMetadataInstructionDataDecoder().decode(instruction.data),
  };
}
