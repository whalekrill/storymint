//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct InitializeCollection {
      
              
          pub payer: solana_program::pubkey::Pubkey,
          
              
          pub master_state: solana_program::pubkey::Pubkey,
          
              
          pub collection: solana_program::pubkey::Pubkey,
          
              
          pub update_authority: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub mpl_core: solana_program::pubkey::Pubkey,
      }

impl InitializeCollection {
  pub fn instruction(&self, args: InitializeCollectionInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeCollectionInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.update_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = InitializeCollectionInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct InitializeCollectionInstructionData {
            discriminator: [u8; 8],
                  }

impl InitializeCollectionInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [112, 62, 53, 139, 173, 152, 98, 93],
                                              }
  }
}

impl Default for InitializeCollectionInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeCollectionInstructionArgs {
                  pub name: String,
                pub uri: String,
      }


/// Instruction builder for `InitializeCollection`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` master_state
                ///   2. `[writable]` collection
                      ///   3. `[writable, signer]` update_authority
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   5. `[optional]` mpl_core (default to `CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d`)
#[derive(Clone, Debug, Default)]
pub struct InitializeCollectionBuilder {
            payer: Option<solana_program::pubkey::Pubkey>,
                master_state: Option<solana_program::pubkey::Pubkey>,
                collection: Option<solana_program::pubkey::Pubkey>,
                update_authority: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                mpl_core: Option<solana_program::pubkey::Pubkey>,
                        name: Option<String>,
                uri: Option<String>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeCollectionBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            #[inline(always)]
    pub fn master_state(&mut self, master_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_state = Some(master_state);
                    self
    }
            #[inline(always)]
    pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.collection = Some(collection);
                    self
    }
            #[inline(always)]
    pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.update_authority = Some(update_authority);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d']`
#[inline(always)]
    pub fn mpl_core(&mut self, mpl_core: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mpl_core = Some(mpl_core);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitializeCollection {
                              payer: self.payer.expect("payer is not set"),
                                        master_state: self.master_state.expect("master_state is not set"),
                                        collection: self.collection.expect("collection is not set"),
                                        update_authority: self.update_authority.expect("update_authority is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        mpl_core: self.mpl_core.unwrap_or(solana_program::pubkey!("CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d")),
                      };
          let args = InitializeCollectionInstructionArgs {
                                                              name: self.name.clone().expect("name is not set"),
                                                                  uri: self.uri.clone().expect("uri is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize_collection` CPI accounts.
  pub struct InitializeCollectionCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub collection: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub update_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mpl_core: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `initialize_collection` CPI instruction.
pub struct InitializeCollectionCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub collection: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub update_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mpl_core: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeCollectionInstructionArgs,
  }

impl<'a, 'b> InitializeCollectionCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitializeCollectionCpiAccounts<'a, 'b>,
              args: InitializeCollectionInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              master_state: accounts.master_state,
              collection: accounts.collection,
              update_authority: accounts.update_authority,
              system_program: accounts.system_program,
              mpl_core: accounts.mpl_core,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.update_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = InitializeCollectionInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.master_state.clone());
                        account_infos.push(self.collection.clone());
                        account_infos.push(self.update_authority.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.mpl_core.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeCollection` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` master_state
                ///   2. `[writable]` collection
                      ///   3. `[writable, signer]` update_authority
          ///   4. `[]` system_program
          ///   5. `[]` mpl_core
#[derive(Clone, Debug)]
pub struct InitializeCollectionCpiBuilder<'a, 'b> {
  instruction: Box<InitializeCollectionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCollectionCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeCollectionCpiBuilderInstruction {
      __program: program,
              payer: None,
              master_state: None,
              collection: None,
              update_authority: None,
              system_program: None,
              mpl_core: None,
                                            name: None,
                                uri: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn master_state(&mut self, master_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_state = Some(master_state);
                    self
    }
      #[inline(always)]
    pub fn collection(&mut self, collection: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collection = Some(collection);
                    self
    }
      #[inline(always)]
    pub fn update_authority(&mut self, update_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.update_authority = Some(update_authority);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn mpl_core(&mut self, mpl_core: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mpl_core = Some(mpl_core);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = InitializeCollectionInstructionArgs {
                                                              name: self.instruction.name.clone().expect("name is not set"),
                                                                  uri: self.instruction.uri.clone().expect("uri is not set"),
                                    };
        let instruction = InitializeCollectionCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          master_state: self.instruction.master_state.expect("master_state is not set"),
                  
          collection: self.instruction.collection.expect("collection is not set"),
                  
          update_authority: self.instruction.update_authority.expect("update_authority is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          mpl_core: self.instruction.mpl_core.expect("mpl_core is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeCollectionCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                update_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mpl_core: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        name: Option<String>,
                uri: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

