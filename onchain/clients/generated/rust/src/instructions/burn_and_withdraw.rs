//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct BurnAndWithdraw {
      
              
          pub owner: solana_program::pubkey::Pubkey,
          
              
          pub master_state: solana_program::pubkey::Pubkey,
          
              
          pub vault: solana_program::pubkey::Pubkey,
          
              
          pub token_metadata_program: solana_program::pubkey::Pubkey,
          
              
          pub metadata: solana_program::pubkey::Pubkey,
          
              
          pub token_account: solana_program::pubkey::Pubkey,
          
              
          pub mint: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
          
              
          pub sysvar_instructions: solana_program::pubkey::Pubkey,
          
              
          pub edition_marker: solana_program::pubkey::Pubkey,
      }

impl BurnAndWithdraw {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_instructions,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.edition_marker,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = BurnAndWithdrawInstructionData::new().try_to_vec().unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BurnAndWithdrawInstructionData {
            discriminator: [u8; 8],
      }

impl BurnAndWithdrawInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [216, 117, 35, 35, 239, 192, 140, 79],
                  }
  }
}

impl Default for BurnAndWithdrawInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `BurnAndWithdraw`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` owner
                ///   1. `[writable]` master_state
                ///   2. `[writable]` vault
                ///   3. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
                ///   4. `[writable]` metadata
                ///   5. `[writable]` token_account
                ///   6. `[writable]` mint
                ///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   9. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
          ///   10. `[]` sysvar_instructions
                ///   11. `[writable]` edition_marker
#[derive(Clone, Debug, Default)]
pub struct BurnAndWithdrawBuilder {
            owner: Option<solana_program::pubkey::Pubkey>,
                master_state: Option<solana_program::pubkey::Pubkey>,
                vault: Option<solana_program::pubkey::Pubkey>,
                token_metadata_program: Option<solana_program::pubkey::Pubkey>,
                metadata: Option<solana_program::pubkey::Pubkey>,
                token_account: Option<solana_program::pubkey::Pubkey>,
                mint: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
                edition_marker: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BurnAndWithdrawBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.owner = Some(owner);
                    self
    }
            #[inline(always)]
    pub fn master_state(&mut self, master_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_state = Some(master_state);
                    self
    }
            #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault = Some(vault);
                    self
    }
            /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
#[inline(always)]
    pub fn token_metadata_program(&mut self, token_metadata_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_metadata_program = Some(token_metadata_program);
                    self
    }
            #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.metadata = Some(metadata);
                    self
    }
            #[inline(always)]
    pub fn token_account(&mut self, token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_account = Some(token_account);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn sysvar_instructions(&mut self, sysvar_instructions: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.sysvar_instructions = Some(sysvar_instructions);
                    self
    }
            #[inline(always)]
    pub fn edition_marker(&mut self, edition_marker: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.edition_marker = Some(edition_marker);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = BurnAndWithdraw {
                              owner: self.owner.expect("owner is not set"),
                                        master_state: self.master_state.expect("master_state is not set"),
                                        vault: self.vault.expect("vault is not set"),
                                        token_metadata_program: self.token_metadata_program.unwrap_or(solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")),
                                        metadata: self.metadata.expect("metadata is not set"),
                                        token_account: self.token_account.expect("token_account is not set"),
                                        mint: self.mint.expect("mint is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        sysvar_instructions: self.sysvar_instructions.expect("sysvar_instructions is not set"),
                                        edition_marker: self.edition_marker.expect("edition_marker is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `burn_and_withdraw` CPI accounts.
  pub struct BurnAndWithdrawCpiAccounts<'a, 'b> {
          
                    
              pub owner: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub sysvar_instructions: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub edition_marker: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `burn_and_withdraw` CPI instruction.
pub struct BurnAndWithdrawCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub owner: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub metadata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub sysvar_instructions: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub edition_marker: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> BurnAndWithdrawCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: BurnAndWithdrawCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              owner: accounts.owner,
              master_state: accounts.master_state,
              vault: accounts.vault,
              token_metadata_program: accounts.token_metadata_program,
              metadata: accounts.metadata,
              token_account: accounts.token_account,
              mint: accounts.mint,
              token_program: accounts.token_program,
              system_program: accounts.system_program,
              rent: accounts.rent,
              sysvar_instructions: accounts.sysvar_instructions,
              edition_marker: accounts.edition_marker,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_instructions.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.edition_marker.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = BurnAndWithdrawInstructionData::new().try_to_vec().unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(12 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.owner.clone());
                        account_infos.push(self.master_state.clone());
                        account_infos.push(self.vault.clone());
                        account_infos.push(self.token_metadata_program.clone());
                        account_infos.push(self.metadata.clone());
                        account_infos.push(self.token_account.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.sysvar_instructions.clone());
                        account_infos.push(self.edition_marker.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `BurnAndWithdraw` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` owner
                ///   1. `[writable]` master_state
                ///   2. `[writable]` vault
          ///   3. `[]` token_metadata_program
                ///   4. `[writable]` metadata
                ///   5. `[writable]` token_account
                ///   6. `[writable]` mint
          ///   7. `[]` token_program
          ///   8. `[]` system_program
          ///   9. `[]` rent
          ///   10. `[]` sysvar_instructions
                ///   11. `[writable]` edition_marker
#[derive(Clone, Debug)]
pub struct BurnAndWithdrawCpiBuilder<'a, 'b> {
  instruction: Box<BurnAndWithdrawCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BurnAndWithdrawCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(BurnAndWithdrawCpiBuilderInstruction {
      __program: program,
              owner: None,
              master_state: None,
              vault: None,
              token_metadata_program: None,
              metadata: None,
              token_account: None,
              mint: None,
              token_program: None,
              system_program: None,
              rent: None,
              sysvar_instructions: None,
              edition_marker: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.owner = Some(owner);
                    self
    }
      #[inline(always)]
    pub fn master_state(&mut self, master_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_state = Some(master_state);
                    self
    }
      #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault = Some(vault);
                    self
    }
      #[inline(always)]
    pub fn token_metadata_program(&mut self, token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_metadata_program = Some(token_metadata_program);
                    self
    }
      #[inline(always)]
    pub fn metadata(&mut self, metadata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.metadata = Some(metadata);
                    self
    }
      #[inline(always)]
    pub fn token_account(&mut self, token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_account = Some(token_account);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn sysvar_instructions(&mut self, sysvar_instructions: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.sysvar_instructions = Some(sysvar_instructions);
                    self
    }
      #[inline(always)]
    pub fn edition_marker(&mut self, edition_marker: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.edition_marker = Some(edition_marker);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = BurnAndWithdrawCpi {
        __program: self.instruction.__program,
                  
          owner: self.instruction.owner.expect("owner is not set"),
                  
          master_state: self.instruction.master_state.expect("master_state is not set"),
                  
          vault: self.instruction.vault.expect("vault is not set"),
                  
          token_metadata_program: self.instruction.token_metadata_program.expect("token_metadata_program is not set"),
                  
          metadata: self.instruction.metadata.expect("metadata is not set"),
                  
          token_account: self.instruction.token_account.expect("token_account is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          sysvar_instructions: self.instruction.sysvar_instructions.expect("sysvar_instructions is not set"),
                  
          edition_marker: self.instruction.edition_marker.expect("edition_marker is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct BurnAndWithdrawCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                sysvar_instructions: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                edition_marker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

