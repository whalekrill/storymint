//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use crate::generated::types::UpdateMetadataArgs;

/// Accounts.
pub struct UpdateMetadata {
            /// The asset to update

    
              
          pub asset: solana_program::pubkey::Pubkey,
                /// The collection this asset belongs to (optional)

    
              
          pub collection: Option<solana_program::pubkey::Pubkey>,
          
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub payer: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub log_wrapper: Option<solana_program::pubkey::Pubkey>,
          
              
          pub mpl_core: solana_program::pubkey::Pubkey,
      }

impl UpdateMetadata {
  pub fn instruction(&self, args: UpdateMetadataInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: UpdateMetadataInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.asset,
            false
          ));
                                                      if let Some(collection) = self.collection {
              accounts.push(solana_program::instruction::AccountMeta::new(
                collection,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOCKED_SOL_PNFT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                                      if let Some(log_wrapper) = self.log_wrapper {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                log_wrapper,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOCKED_SOL_PNFT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = UpdateMetadataInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct UpdateMetadataInstructionData {
            discriminator: [u8; 8],
            }

impl UpdateMetadataInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [170, 182, 43, 239, 97, 78, 225, 186],
                                }
  }
}

impl Default for UpdateMetadataInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateMetadataInstructionArgs {
                  pub args: UpdateMetadataArgs,
      }


/// Instruction builder for `UpdateMetadata`.
///
/// ### Accounts:
///
                ///   0. `[writable]` asset
                      ///   1. `[writable, optional]` collection
                      ///   2. `[writable, signer]` authority
                      ///   3. `[writable, signer]` payer
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   5. `[optional]` log_wrapper
                ///   6. `[optional]` mpl_core (default to `CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d`)
#[derive(Clone, Debug, Default)]
pub struct UpdateMetadataBuilder {
            asset: Option<solana_program::pubkey::Pubkey>,
                collection: Option<solana_program::pubkey::Pubkey>,
                authority: Option<solana_program::pubkey::Pubkey>,
                payer: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                log_wrapper: Option<solana_program::pubkey::Pubkey>,
                mpl_core: Option<solana_program::pubkey::Pubkey>,
                        args: Option<UpdateMetadataArgs>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateMetadataBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// The asset to update
#[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.asset = Some(asset);
                    self
    }
            /// `[optional account]`
/// The collection this asset belongs to (optional)
#[inline(always)]
    pub fn collection(&mut self, collection: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.collection = collection;
                    self
    }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.log_wrapper = log_wrapper;
                    self
    }
            /// `[optional account, default to 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d']`
#[inline(always)]
    pub fn mpl_core(&mut self, mpl_core: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mpl_core = Some(mpl_core);
                    self
    }
                    #[inline(always)]
      pub fn args(&mut self, args: UpdateMetadataArgs) -> &mut Self {
        self.args = Some(args);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = UpdateMetadata {
                              asset: self.asset.expect("asset is not set"),
                                        collection: self.collection,
                                        authority: self.authority.expect("authority is not set"),
                                        payer: self.payer.expect("payer is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        log_wrapper: self.log_wrapper,
                                        mpl_core: self.mpl_core.unwrap_or(solana_program::pubkey!("CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d")),
                      };
          let args = UpdateMetadataInstructionArgs {
                                                              args: self.args.clone().expect("args is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `update_metadata` CPI accounts.
  pub struct UpdateMetadataCpiAccounts<'a, 'b> {
                  /// The asset to update

      
                    
              pub asset: &'b solana_program::account_info::AccountInfo<'a>,
                        /// The collection this asset belongs to (optional)

      
                    
              pub collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                
                    
              pub mpl_core: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `update_metadata` CPI instruction.
pub struct UpdateMetadataCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The asset to update

    
              
          pub asset: &'b solana_program::account_info::AccountInfo<'a>,
                /// The collection this asset belongs to (optional)

    
              
          pub collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
          
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
          
              
          pub mpl_core: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: UpdateMetadataInstructionArgs,
  }

impl<'a, 'b> UpdateMetadataCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: UpdateMetadataCpiAccounts<'a, 'b>,
              args: UpdateMetadataInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              asset: accounts.asset,
              collection: accounts.collection,
              authority: accounts.authority,
              payer: accounts.payer,
              system_program: accounts.system_program,
              log_wrapper: accounts.log_wrapper,
              mpl_core: accounts.mpl_core,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asset.key,
            false
          ));
                                          if let Some(collection) = self.collection {
            accounts.push(solana_program::instruction::AccountMeta::new(
              *collection.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::LOCKED_SOL_PNFT_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          if let Some(log_wrapper) = self.log_wrapper {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              *log_wrapper.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::LOCKED_SOL_PNFT_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = UpdateMetadataInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(7 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.asset.clone());
                        if let Some(collection) = self.collection {
          account_infos.push(collection.clone());
        }
                        account_infos.push(self.authority.clone());
                        account_infos.push(self.payer.clone());
                        account_infos.push(self.system_program.clone());
                        if let Some(log_wrapper) = self.log_wrapper {
          account_infos.push(log_wrapper.clone());
        }
                        account_infos.push(self.mpl_core.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UpdateMetadata` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` asset
                      ///   1. `[writable, optional]` collection
                      ///   2. `[writable, signer]` authority
                      ///   3. `[writable, signer]` payer
          ///   4. `[]` system_program
                ///   5. `[optional]` log_wrapper
          ///   6. `[]` mpl_core
#[derive(Clone, Debug)]
pub struct UpdateMetadataCpiBuilder<'a, 'b> {
  instruction: Box<UpdateMetadataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateMetadataCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UpdateMetadataCpiBuilderInstruction {
      __program: program,
              asset: None,
              collection: None,
              authority: None,
              payer: None,
              system_program: None,
              log_wrapper: None,
              mpl_core: None,
                                            args: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// The asset to update
#[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.asset = Some(asset);
                    self
    }
      /// `[optional account]`
/// The collection this asset belongs to (optional)
#[inline(always)]
    pub fn collection(&mut self, collection: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.collection = collection;
                    self
    }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.log_wrapper = log_wrapper;
                    self
    }
      #[inline(always)]
    pub fn mpl_core(&mut self, mpl_core: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mpl_core = Some(mpl_core);
                    self
    }
                    #[inline(always)]
      pub fn args(&mut self, args: UpdateMetadataArgs) -> &mut Self {
        self.instruction.args = Some(args);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = UpdateMetadataInstructionArgs {
                                                              args: self.instruction.args.clone().expect("args is not set"),
                                    };
        let instruction = UpdateMetadataCpi {
        __program: self.instruction.__program,
                  
          asset: self.instruction.asset.expect("asset is not set"),
                  
          collection: self.instruction.collection,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          log_wrapper: self.instruction.log_wrapper,
                  
          mpl_core: self.instruction.mpl_core.expect("mpl_core is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UpdateMetadataCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mpl_core: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        args: Option<UpdateMetadataArgs>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

