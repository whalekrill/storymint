//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MintAsset {
      
              
          pub payer: solana_program::pubkey::Pubkey,
          
              
          pub vault: solana_program::pubkey::Pubkey,
                /// The new asset being created

    
              
          pub asset: solana_program::pubkey::Pubkey,
          
              
          pub master_state: solana_program::pubkey::Pubkey,
                /// The collection this asset belongs to

    
              
          pub collection: solana_program::pubkey::Pubkey,
          
              
          pub mint_authority: solana_program::pubkey::Pubkey,
                /// The owner of the new asset

    
              
          pub owner: Option<solana_program::pubkey::Pubkey>,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub log_wrapper: Option<solana_program::pubkey::Pubkey>,
          
              
          pub mpl_core: solana_program::pubkey::Pubkey,
      }

impl MintAsset {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.asset,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            false
          ));
                                                      if let Some(owner) = self.owner {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                owner,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOCKED_SOL_PNFT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                                      if let Some(log_wrapper) = self.log_wrapper {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                log_wrapper,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::LOCKED_SOL_PNFT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = MintAssetInstructionData::new().try_to_vec().unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MintAssetInstructionData {
            discriminator: [u8; 8],
      }

impl MintAssetInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [84, 175, 211, 156, 56, 250, 104, 118],
                  }
  }
}

impl Default for MintAssetInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `MintAsset`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` vault
                      ///   2. `[writable, signer]` asset
                ///   3. `[writable]` master_state
                ///   4. `[writable]` collection
          ///   5. `[]` mint_authority
                ///   6. `[optional]` owner
                ///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   8. `[optional]` log_wrapper
                ///   9. `[optional]` mpl_core (default to `CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d`)
#[derive(Clone, Debug, Default)]
pub struct MintAssetBuilder {
            payer: Option<solana_program::pubkey::Pubkey>,
                vault: Option<solana_program::pubkey::Pubkey>,
                asset: Option<solana_program::pubkey::Pubkey>,
                master_state: Option<solana_program::pubkey::Pubkey>,
                collection: Option<solana_program::pubkey::Pubkey>,
                mint_authority: Option<solana_program::pubkey::Pubkey>,
                owner: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                log_wrapper: Option<solana_program::pubkey::Pubkey>,
                mpl_core: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MintAssetBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.vault = Some(vault);
                    self
    }
            /// The new asset being created
#[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.asset = Some(asset);
                    self
    }
            #[inline(always)]
    pub fn master_state(&mut self, master_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_state = Some(master_state);
                    self
    }
            /// The collection this asset belongs to
#[inline(always)]
    pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.collection = Some(collection);
                    self
    }
            #[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint_authority = Some(mint_authority);
                    self
    }
            /// `[optional account]`
/// The owner of the new asset
#[inline(always)]
    pub fn owner(&mut self, owner: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.owner = owner;
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.log_wrapper = log_wrapper;
                    self
    }
            /// `[optional account, default to 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d']`
#[inline(always)]
    pub fn mpl_core(&mut self, mpl_core: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mpl_core = Some(mpl_core);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = MintAsset {
                              payer: self.payer.expect("payer is not set"),
                                        vault: self.vault.expect("vault is not set"),
                                        asset: self.asset.expect("asset is not set"),
                                        master_state: self.master_state.expect("master_state is not set"),
                                        collection: self.collection.expect("collection is not set"),
                                        mint_authority: self.mint_authority.expect("mint_authority is not set"),
                                        owner: self.owner,
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        log_wrapper: self.log_wrapper,
                                        mpl_core: self.mpl_core.unwrap_or(solana_program::pubkey!("CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `mint_asset` CPI accounts.
  pub struct MintAssetCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub vault: &'b solana_program::account_info::AccountInfo<'a>,
                        /// The new asset being created

      
                    
              pub asset: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
                        /// The collection this asset belongs to

      
                    
              pub collection: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
                        /// The owner of the new asset

      
                    
              pub owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                
                    
              pub mpl_core: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `mint_asset` CPI instruction.
pub struct MintAssetCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub vault: &'b solana_program::account_info::AccountInfo<'a>,
                /// The new asset being created

    
              
          pub asset: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
                /// The collection this asset belongs to

    
              
          pub collection: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
                /// The owner of the new asset

    
              
          pub owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
          
              
          pub mpl_core: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> MintAssetCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: MintAssetCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              vault: accounts.vault,
              asset: accounts.asset,
              master_state: accounts.master_state,
              collection: accounts.collection,
              mint_authority: accounts.mint_authority,
              owner: accounts.owner,
              system_program: accounts.system_program,
              log_wrapper: accounts.log_wrapper,
              mpl_core: accounts.mpl_core,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asset.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_authority.key,
            false
          ));
                                          if let Some(owner) = self.owner {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              *owner.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::LOCKED_SOL_PNFT_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          if let Some(log_wrapper) = self.log_wrapper {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              *log_wrapper.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::LOCKED_SOL_PNFT_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = MintAssetInstructionData::new().try_to_vec().unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(10 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.vault.clone());
                        account_infos.push(self.asset.clone());
                        account_infos.push(self.master_state.clone());
                        account_infos.push(self.collection.clone());
                        account_infos.push(self.mint_authority.clone());
                        if let Some(owner) = self.owner {
          account_infos.push(owner.clone());
        }
                        account_infos.push(self.system_program.clone());
                        if let Some(log_wrapper) = self.log_wrapper {
          account_infos.push(log_wrapper.clone());
        }
                        account_infos.push(self.mpl_core.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `MintAsset` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` vault
                      ///   2. `[writable, signer]` asset
                ///   3. `[writable]` master_state
                ///   4. `[writable]` collection
          ///   5. `[]` mint_authority
                ///   6. `[optional]` owner
          ///   7. `[]` system_program
                ///   8. `[optional]` log_wrapper
          ///   9. `[]` mpl_core
#[derive(Clone, Debug)]
pub struct MintAssetCpiBuilder<'a, 'b> {
  instruction: Box<MintAssetCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MintAssetCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(MintAssetCpiBuilderInstruction {
      __program: program,
              payer: None,
              vault: None,
              asset: None,
              master_state: None,
              collection: None,
              mint_authority: None,
              owner: None,
              system_program: None,
              log_wrapper: None,
              mpl_core: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault = Some(vault);
                    self
    }
      /// The new asset being created
#[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.asset = Some(asset);
                    self
    }
      #[inline(always)]
    pub fn master_state(&mut self, master_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_state = Some(master_state);
                    self
    }
      /// The collection this asset belongs to
#[inline(always)]
    pub fn collection(&mut self, collection: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collection = Some(collection);
                    self
    }
      #[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint_authority = Some(mint_authority);
                    self
    }
      /// `[optional account]`
/// The owner of the new asset
#[inline(always)]
    pub fn owner(&mut self, owner: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.owner = owner;
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn log_wrapper(&mut self, log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.log_wrapper = log_wrapper;
                    self
    }
      #[inline(always)]
    pub fn mpl_core(&mut self, mpl_core: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mpl_core = Some(mpl_core);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = MintAssetCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          vault: self.instruction.vault.expect("vault is not set"),
                  
          asset: self.instruction.asset.expect("asset is not set"),
                  
          master_state: self.instruction.master_state.expect("master_state is not set"),
                  
          collection: self.instruction.collection.expect("collection is not set"),
                  
          mint_authority: self.instruction.mint_authority.expect("mint_authority is not set"),
                  
          owner: self.instruction.owner,
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          log_wrapper: self.instruction.log_wrapper,
                  
          mpl_core: self.instruction.mpl_core.expect("mpl_core is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct MintAssetCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                log_wrapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mpl_core: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

