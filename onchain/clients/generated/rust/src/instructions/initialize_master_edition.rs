//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct InitializeMasterEdition {
      
              
          pub payer: solana_program::pubkey::Pubkey,
          
              
          pub master_state: solana_program::pubkey::Pubkey,
          
              
          pub master_mint: solana_program::pubkey::Pubkey,
          
              
          pub master_metadata: solana_program::pubkey::Pubkey,
          
              
          pub master_edition: solana_program::pubkey::Pubkey,
          
              
          pub update_authority: solana_program::pubkey::Pubkey,
          
              
          pub update_authority_token: solana_program::pubkey::Pubkey,
          
              
          pub collection_authority_record: solana_program::pubkey::Pubkey,
          
              
          pub delegate_authority: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
          
              
          pub token_metadata_program: solana_program::pubkey::Pubkey,
      }

impl InitializeMasterEdition {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_state,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_metadata,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.master_edition,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.update_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.update_authority_token,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection_authority_record,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.delegate_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = InitializeMasterEditionInstructionData::new().try_to_vec().unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct InitializeMasterEditionInstructionData {
            discriminator: [u8; 8],
      }

impl InitializeMasterEditionInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [175, 153, 201, 57, 96, 128, 94, 181],
                  }
  }
}

impl Default for InitializeMasterEditionInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `InitializeMasterEdition`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` master_state
                ///   2. `[writable]` master_mint
                ///   3. `[writable]` master_metadata
                ///   4. `[writable]` master_edition
                      ///   5. `[writable, signer]` update_authority
                ///   6. `[writable]` update_authority_token
                ///   7. `[writable]` collection_authority_record
                ///   8. `[writable]` delegate_authority
                ///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   11. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
                ///   12. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
                ///   13. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
#[derive(Clone, Debug, Default)]
pub struct InitializeMasterEditionBuilder {
            payer: Option<solana_program::pubkey::Pubkey>,
                master_state: Option<solana_program::pubkey::Pubkey>,
                master_mint: Option<solana_program::pubkey::Pubkey>,
                master_metadata: Option<solana_program::pubkey::Pubkey>,
                master_edition: Option<solana_program::pubkey::Pubkey>,
                update_authority: Option<solana_program::pubkey::Pubkey>,
                update_authority_token: Option<solana_program::pubkey::Pubkey>,
                collection_authority_record: Option<solana_program::pubkey::Pubkey>,
                delegate_authority: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                token_metadata_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeMasterEditionBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            #[inline(always)]
    pub fn master_state(&mut self, master_state: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_state = Some(master_state);
                    self
    }
            #[inline(always)]
    pub fn master_mint(&mut self, master_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_mint = Some(master_mint);
                    self
    }
            #[inline(always)]
    pub fn master_metadata(&mut self, master_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_metadata = Some(master_metadata);
                    self
    }
            #[inline(always)]
    pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.master_edition = Some(master_edition);
                    self
    }
            #[inline(always)]
    pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.update_authority = Some(update_authority);
                    self
    }
            #[inline(always)]
    pub fn update_authority_token(&mut self, update_authority_token: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.update_authority_token = Some(update_authority_token);
                    self
    }
            #[inline(always)]
    pub fn collection_authority_record(&mut self, collection_authority_record: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.collection_authority_record = Some(collection_authority_record);
                    self
    }
            #[inline(always)]
    pub fn delegate_authority(&mut self, delegate_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.delegate_authority = Some(delegate_authority);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
#[inline(always)]
    pub fn token_metadata_program(&mut self, token_metadata_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_metadata_program = Some(token_metadata_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitializeMasterEdition {
                              payer: self.payer.expect("payer is not set"),
                                        master_state: self.master_state.expect("master_state is not set"),
                                        master_mint: self.master_mint.expect("master_mint is not set"),
                                        master_metadata: self.master_metadata.expect("master_metadata is not set"),
                                        master_edition: self.master_edition.expect("master_edition is not set"),
                                        update_authority: self.update_authority.expect("update_authority is not set"),
                                        update_authority_token: self.update_authority_token.expect("update_authority_token is not set"),
                                        collection_authority_record: self.collection_authority_record.expect("collection_authority_record is not set"),
                                        delegate_authority: self.delegate_authority.expect("delegate_authority is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        associated_token_program: self.associated_token_program.unwrap_or(solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        token_metadata_program: self.token_metadata_program.unwrap_or(solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `initialize_master_edition` CPI accounts.
  pub struct InitializeMasterEditionCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_metadata: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub master_edition: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub update_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub update_authority_token: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub collection_authority_record: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub delegate_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `initialize_master_edition` CPI instruction.
pub struct InitializeMasterEditionCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_state: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_metadata: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub master_edition: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub update_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub update_authority_token: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub collection_authority_record: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub delegate_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> InitializeMasterEditionCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitializeMasterEditionCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              master_state: accounts.master_state,
              master_mint: accounts.master_mint,
              master_metadata: accounts.master_metadata,
              master_edition: accounts.master_edition,
              update_authority: accounts.update_authority,
              update_authority_token: accounts.update_authority_token,
              collection_authority_record: accounts.collection_authority_record,
              delegate_authority: accounts.delegate_authority,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
              associated_token_program: accounts.associated_token_program,
              rent: accounts.rent,
              token_metadata_program: accounts.token_metadata_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_state.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_metadata.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.master_edition.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.update_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.update_authority_token.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection_authority_record.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.delegate_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = InitializeMasterEditionInstructionData::new().try_to_vec().unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LOCKED_SOL_PNFT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(14 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.master_state.clone());
                        account_infos.push(self.master_mint.clone());
                        account_infos.push(self.master_metadata.clone());
                        account_infos.push(self.master_edition.clone());
                        account_infos.push(self.update_authority.clone());
                        account_infos.push(self.update_authority_token.clone());
                        account_infos.push(self.collection_authority_record.clone());
                        account_infos.push(self.delegate_authority.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.token_metadata_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeMasterEdition` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` master_state
                ///   2. `[writable]` master_mint
                ///   3. `[writable]` master_metadata
                ///   4. `[writable]` master_edition
                      ///   5. `[writable, signer]` update_authority
                ///   6. `[writable]` update_authority_token
                ///   7. `[writable]` collection_authority_record
                ///   8. `[writable]` delegate_authority
          ///   9. `[]` system_program
          ///   10. `[]` token_program
          ///   11. `[]` associated_token_program
          ///   12. `[]` rent
          ///   13. `[]` token_metadata_program
#[derive(Clone, Debug)]
pub struct InitializeMasterEditionCpiBuilder<'a, 'b> {
  instruction: Box<InitializeMasterEditionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeMasterEditionCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeMasterEditionCpiBuilderInstruction {
      __program: program,
              payer: None,
              master_state: None,
              master_mint: None,
              master_metadata: None,
              master_edition: None,
              update_authority: None,
              update_authority_token: None,
              collection_authority_record: None,
              delegate_authority: None,
              system_program: None,
              token_program: None,
              associated_token_program: None,
              rent: None,
              token_metadata_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn master_state(&mut self, master_state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_state = Some(master_state);
                    self
    }
      #[inline(always)]
    pub fn master_mint(&mut self, master_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_mint = Some(master_mint);
                    self
    }
      #[inline(always)]
    pub fn master_metadata(&mut self, master_metadata: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_metadata = Some(master_metadata);
                    self
    }
      #[inline(always)]
    pub fn master_edition(&mut self, master_edition: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.master_edition = Some(master_edition);
                    self
    }
      #[inline(always)]
    pub fn update_authority(&mut self, update_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.update_authority = Some(update_authority);
                    self
    }
      #[inline(always)]
    pub fn update_authority_token(&mut self, update_authority_token: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.update_authority_token = Some(update_authority_token);
                    self
    }
      #[inline(always)]
    pub fn collection_authority_record(&mut self, collection_authority_record: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collection_authority_record = Some(collection_authority_record);
                    self
    }
      #[inline(always)]
    pub fn delegate_authority(&mut self, delegate_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.delegate_authority = Some(delegate_authority);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn token_metadata_program(&mut self, token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_metadata_program = Some(token_metadata_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = InitializeMasterEditionCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          master_state: self.instruction.master_state.expect("master_state is not set"),
                  
          master_mint: self.instruction.master_mint.expect("master_mint is not set"),
                  
          master_metadata: self.instruction.master_metadata.expect("master_metadata is not set"),
                  
          master_edition: self.instruction.master_edition.expect("master_edition is not set"),
                  
          update_authority: self.instruction.update_authority.expect("update_authority is not set"),
                  
          update_authority_token: self.instruction.update_authority_token.expect("update_authority_token is not set"),
                  
          collection_authority_record: self.instruction.collection_authority_record.expect("collection_authority_record is not set"),
                  
          delegate_authority: self.instruction.delegate_authority.expect("delegate_authority is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          token_metadata_program: self.instruction.token_metadata_program.expect("token_metadata_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeMasterEditionCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                master_edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                update_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                update_authority_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                collection_authority_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                delegate_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

