/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type TokenVault = Account<TokenVaultAccountData>;

export type TokenVaultAccountData = {
  discriminator: Uint8Array;
  asset: PublicKey;
};

export type TokenVaultAccountDataArgs = { asset: PublicKey };

export function getTokenVaultAccountDataSerializer(): Serializer<
  TokenVaultAccountDataArgs,
  TokenVaultAccountData
> {
  return mapSerializer<TokenVaultAccountDataArgs, any, TokenVaultAccountData>(
    struct<TokenVaultAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['asset', publicKeySerializer()],
      ],
      { description: 'TokenVaultAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([121, 7, 84, 254, 151, 228, 43, 144]),
    })
  ) as Serializer<TokenVaultAccountDataArgs, TokenVaultAccountData>;
}

export function deserializeTokenVault(rawAccount: RpcAccount): TokenVault {
  return deserializeAccount(rawAccount, getTokenVaultAccountDataSerializer());
}

export async function fetchTokenVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenVault> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TokenVault');
  return deserializeTokenVault(maybeAccount);
}

export async function safeFetchTokenVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenVault | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTokenVault(maybeAccount) : null;
}

export async function fetchAllTokenVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenVault');
    return deserializeTokenVault(maybeAccount);
  });
}

export async function safeFetchAllTokenVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTokenVault(maybeAccount as RpcAccount));
}

export function getTokenVaultGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'storymint',
    '5qGtv9tb8yWuLG6jm2EPTBa3SsLP2hkhToB7tZT6mp5B'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ discriminator: Uint8Array; asset: PublicKey }>({
      discriminator: [0, bytes({ size: 8 })],
      asset: [8, publicKeySerializer()],
    })
    .deserializeUsing<TokenVault>((account) => deserializeTokenVault(account))
    .whereField(
      'discriminator',
      new Uint8Array([121, 7, 84, 254, 151, 228, 43, 144])
    );
}
