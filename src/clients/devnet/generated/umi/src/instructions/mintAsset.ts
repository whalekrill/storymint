/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MintAssetInstructionAccounts = {
  payer: Signer;
  vault?: PublicKey | Pda;
  asset: Signer;
  masterState?: PublicKey | Pda;
  collection: PublicKey | Pda;
  mintAuthority?: PublicKey | Pda;
  owner: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  mplCore?: PublicKey | Pda;
};

// Data.
export type MintAssetInstructionData = { discriminator: Uint8Array };

export type MintAssetInstructionDataArgs = {};

export function getMintAssetInstructionDataSerializer(): Serializer<
  MintAssetInstructionDataArgs,
  MintAssetInstructionData
> {
  return mapSerializer<
    MintAssetInstructionDataArgs,
    any,
    MintAssetInstructionData
  >(
    struct<MintAssetInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'MintAssetInstructionData',
    }),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([84, 175, 211, 156, 56, 250, 104, 118]),
    })
  ) as Serializer<MintAssetInstructionDataArgs, MintAssetInstructionData>;
}

// Instruction.
export function mintAsset(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: MintAssetInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'storymint',
    '5qGtv9tb8yWuLG6jm2EPTBa3SsLP2hkhToB7tZT6mp5B'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    vault: {
      index: 1,
      isWritable: true as boolean,
      value: input.vault ?? null,
    },
    asset: {
      index: 2,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    masterState: {
      index: 3,
      isWritable: true as boolean,
      value: input.masterState ?? null,
    },
    collection: {
      index: 4,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    mintAuthority: {
      index: 5,
      isWritable: false as boolean,
      value: input.mintAuthority ?? null,
    },
    owner: {
      index: 6,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    mplCore: {
      index: 8,
      isWritable: false as boolean,
      value: input.mplCore ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.vault.value) {
    resolvedAccounts.vault.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([118, 97, 117, 108, 116])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.asset.value)
      ),
    ]);
  }
  if (!resolvedAccounts.masterState.value) {
    resolvedAccounts.masterState.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 97, 115, 116, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.collection.value)
      ),
    ]);
  }
  if (!resolvedAccounts.mintAuthority.value) {
    resolvedAccounts.mintAuthority.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          109, 105, 110, 116, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.collection.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.mplCore.value) {
    resolvedAccounts.mplCore.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCore.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMintAssetInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
